<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[SpringBoot：整合Shiro鉴权登录与权限管理]]></title>
    <url>%2F2018%2F11%2F26%2FSpringBoot%EF%BC%9A%E6%95%B4%E5%90%88Shiro%E9%89%B4%E6%9D%83%E7%99%BB%E5%BD%95%E4%B8%8E%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%2F</url>
    <content type="text"><![CDATA[SpringBoot：整合Shiro鉴权登录与权限管理惯例，到目前文章位置的pom.xml 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.fufu&lt;/groupId&gt; &lt;artifactId&gt;springbootdemo&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;springbootdemo&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.0.1.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;!-- springboot-aop包,AOP切面注解,Aspectd等相关注解 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.3.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.commons&lt;/groupId&gt; &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt; &lt;version&gt;3.4&lt;/version&gt; &lt;/dependency&gt; &lt;!-- json --&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;fastjson&lt;/artifactId&gt; &lt;version&gt;1.2.31&lt;/version&gt; &lt;/dependency&gt; &lt;!-- swagger2 --&gt; &lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt; &lt;version&gt;2.6.1&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt; &lt;version&gt;2.6.1&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 分页插件 --&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt; &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.2.5&lt;/version&gt; &lt;/dependency&gt; &lt;!-- alibaba的druid数据库连接池 --&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.1.9&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-core&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.datatype&lt;/groupId&gt; &lt;artifactId&gt;jackson-datatype-joda&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.module&lt;/groupId&gt; &lt;artifactId&gt;jackson-module-parameter-names&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- shiro core --&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt; &lt;artifactId&gt;shiro-core&lt;/artifactId&gt; &lt;version&gt;1.3.2&lt;/version&gt; &lt;/dependency&gt; &lt;!-- shiro权限控制框架 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt; &lt;artifactId&gt;shiro-spring&lt;/artifactId&gt; &lt;version&gt;1.3.2&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 引入Spring Boot 内嵌的Tomcat对jsp的解析包--&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt; &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- servlet 依赖的jar包start--&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- jsp 依赖的jar包start--&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt; &lt;artifactId&gt;javax.servlet.jsp-api&lt;/artifactId&gt; &lt;version&gt;2.3.1&lt;/version&gt; &lt;/dependency&gt; &lt;!-- jstl标签 依赖的jar包start--&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;jstl&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt; &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.3.7&lt;/version&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 新增部分主要为以下 12345678910111213141516171819202122232425262728293031323334353637&lt;!-- shiro core --&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt; &lt;artifactId&gt;shiro-core&lt;/artifactId&gt; &lt;version&gt;1.3.2&lt;/version&gt; &lt;/dependency&gt; &lt;!-- shiro权限控制框架 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt; &lt;artifactId&gt;shiro-spring&lt;/artifactId&gt; &lt;version&gt;1.3.2&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 引入Spring Boot 内嵌的Tomcat对jsp的解析包--&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt; &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- servlet 依赖的jar包start--&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- jsp 依赖的jar包start--&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt; &lt;artifactId&gt;javax.servlet.jsp-api&lt;/artifactId&gt; &lt;version&gt;2.3.1&lt;/version&gt; &lt;/dependency&gt; &lt;!-- jstl标签 依赖的jar包start--&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;jstl&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt; 主要为shiro和jsp登录界面服务 接下来配置shiro类 配置文件夹新增AuthRealm类 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889package com.fufu.config;import com.fufu.entity.Permission;import com.fufu.entity.Role;import com.fufu.entity.User;import com.fufu.service.LoginService;import org.apache.shiro.authc.*;import org.apache.shiro.authz.AuthorizationInfo;import org.apache.shiro.authz.SimpleAuthorizationInfo;import org.apache.shiro.realm.AuthorizingRealm;import org.apache.shiro.subject.PrincipalCollection;import org.apache.shiro.util.ByteSource;import org.springframework.beans.factory.annotation.Autowired;import java.util.Collection;import java.util.HashSet;import java.util.Set;public class AuthRealm extends AuthorizingRealm &#123; @Autowired private LoginService loginService; /** * 为用户授权 * @param principals * @return */ @Override protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) &#123; //获取前端输入的用户信息，封装为User对象 User userweb = (User) principals.getPrimaryPrincipal(); //获取前端输入的用户名 String username = userweb.getUsername(); //根据前端输入的用户名查询数据库中对应的记录 User user = loginService.findByUsername(username); //如果数据库中有该用户名对应的记录，就进行授权操作 if (user != null)&#123; SimpleAuthorizationInfo info = new SimpleAuthorizationInfo(); //因为addRoles和addStringPermissions方法需要的参数类型是Collection //所以先创建两个collection集合 Collection&lt;String&gt; rolesCollection = new HashSet&lt;String&gt;(); Collection&lt;String&gt; perStringCollection = new HashSet&lt;String&gt;(); //获取user的Role的set集合 Set&lt;Role&gt; roles = user.getRoles(); //遍历集合 for (Role role : roles)&#123; //将每一个role的name装进collection集合 rolesCollection.add(role.getName()); //获取每一个Role的permission的set集合 Set&lt;Permission&gt; permissionSet = role.getPermissions(); //遍历集合 for (Permission permission : permissionSet)&#123; //将每一个permission的name装进collection集合 perStringCollection.add(permission.getName()); &#125; //为用户授权 info.addStringPermissions(perStringCollection); &#125; //为用户授予角色 info.addRoles(rolesCollection); return info; &#125;else&#123; return null; &#125; &#125; /** * 认证登录 * @param token * @return * @throws AuthenticationException */ @Override protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException &#123; //token携带了用户信息 UsernamePasswordToken usernamePasswordToken = (UsernamePasswordToken) token; //获取前端输入的用户名 String userName = usernamePasswordToken.getUsername(); //根据用户名查询数据库中对应的记录 User user = loginService.findByUsername(userName); //当前realm对象的name String realmName = getName(); //盐值 ByteSource credentialsSalt = ByteSource.Util.bytes(user.getUsername()); //封装用户信息，构建AuthenticationInfo对象并返回 AuthenticationInfo authcInfo = new SimpleAuthenticationInfo(user, user.getPassword(), credentialsSalt, realmName); return authcInfo; &#125;&#125; 新增ShiroConfiguration类 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122package com.fufu.config;import org.apache.shiro.authc.credential.HashedCredentialsMatcher;import org.apache.shiro.spring.LifecycleBeanPostProcessor;import org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;import org.apache.shiro.spring.web.ShiroFilterFactoryBean;import org.apache.shiro.web.mgt.DefaultWebSecurityManager;import org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.DependsOn;import java.util.LinkedHashMap;@Configurationpublic class ShiroConfiguration &#123; /** * 密码校验规则HashedCredentialsMatcher * 这个类是为了对密码进行编码的 , * 防止密码在数据库里明码保存 , 当然在登陆认证的时候 , * 这个类也负责对form里输入的密码进行编码 * 处理认证匹配处理器：如果自定义需要实现继承HashedCredentialsMatcher */ @Bean(&quot;hashedCredentialsMatcher&quot;) public HashedCredentialsMatcher hashedCredentialsMatcher() &#123; HashedCredentialsMatcher credentialsMatcher = new HashedCredentialsMatcher(); //指定加密方式为MD5 credentialsMatcher.setHashAlgorithmName(&quot;MD5&quot;); //加密次数 credentialsMatcher.setHashIterations(1024); credentialsMatcher.setStoredCredentialsHexEncoded(true); return credentialsMatcher; &#125; @Bean(&quot;authRealm&quot;) @DependsOn(&quot;lifecycleBeanPostProcessor&quot;)//可选 public AuthRealm authRealm(@Qualifier(&quot;hashedCredentialsMatcher&quot;) HashedCredentialsMatcher matcher) &#123; AuthRealm authRealm = new AuthRealm(); authRealm.setAuthorizationCachingEnabled(false); authRealm.setCredentialsMatcher(matcher); return authRealm; &#125; /** * 定义安全管理器securityManager,注入自定义的realm * @param authRealm * @return */ @Bean(&quot;securityManager&quot;) public DefaultWebSecurityManager securityManager(@Qualifier(&quot;authRealm&quot;) AuthRealm authRealm) &#123; DefaultWebSecurityManager manager = new DefaultWebSecurityManager(); manager.setRealm(authRealm); return manager; &#125; /** * 定义shiroFilter过滤器并注入securityManager * @param manager * @return */ @Bean(&quot;shiroFilter&quot;) public ShiroFilterFactoryBean shiroFilter(@Qualifier(&quot;securityManager&quot;) DefaultWebSecurityManager manager) &#123; ShiroFilterFactoryBean bean = new ShiroFilterFactoryBean(); //设置securityManager bean.setSecurityManager(manager); //设置登录页面 //可以写路由也可以写jsp页面的访问路径 bean.setLoginUrl(&quot;/login&quot;); //设置登录成功跳转的页面 bean.setSuccessUrl(&quot;/pages/index.jsp&quot;); //设置未授权跳转的页面 bean.setUnauthorizedUrl(&quot;/pages/unauthorized.jsp&quot;); //定义过滤器 LinkedHashMap&lt;String, String&gt; filterChainDefinitionMap = new LinkedHashMap&lt;&gt;(); filterChainDefinitionMap.put(&quot;/index&quot;, &quot;authc&quot;); filterChainDefinitionMap.put(&quot;/login&quot;, &quot;anon&quot;); filterChainDefinitionMap.put(&quot;/loginUser&quot;, &quot;anon&quot;); filterChainDefinitionMap.put(&quot;/admin&quot;, &quot;roles[admin]&quot;); filterChainDefinitionMap.put(&quot;/edit&quot;, &quot;perms[delete]&quot;); filterChainDefinitionMap.put(&quot;/druid/**&quot;, &quot;anon&quot;); //需要登录访问的资源 , 一般将/**放在最下边 filterChainDefinitionMap.put(&quot;/**&quot;, &quot;authc&quot;); bean.setFilterChainDefinitionMap(filterChainDefinitionMap); return bean; &#125; /** * Spring的一个bean , 由Advisor决定对哪些类的方法进行AOP代理 . * @return */ @Bean public DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator() &#123; DefaultAdvisorAutoProxyCreator creator = new DefaultAdvisorAutoProxyCreator(); creator.setProxyTargetClass(true); return creator; &#125; /** * 配置shiro跟spring的关联 * @param securityManager * @return */ @Bean public AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor(@Qualifier(&quot;securityManager&quot;) DefaultWebSecurityManager securityManager) &#123; AuthorizationAttributeSourceAdvisor advisor = new AuthorizationAttributeSourceAdvisor(); advisor.setSecurityManager(securityManager); return advisor; &#125; /** * lifecycleBeanPostProcessor是负责生命周期的 , 初始化和销毁的类 * (可选) */ @Bean(&quot;lifecycleBeanPostProcessor&quot;) public LifecycleBeanPostProcessor lifecycleBeanPostProcessor() &#123; return new LifecycleBeanPostProcessor(); &#125;&#125; 接下来MVC三层 entity 12345678910111213141516171819202122232425262728293031323334353637383940414243package com.fufu.entity;import java.util.HashSet;import java.util.Set;public class User &#123; private Integer uid; private String username; private String password; private Set&lt;Role&gt; roles = new HashSet&lt;&gt;(); public Integer getUid() &#123; return uid; &#125; public void setUid(Integer uid) &#123; this.uid = uid; &#125; public String getUsername() &#123; return username; &#125; public void setUsername(String username) &#123; this.username = username; &#125; public String getPassword() &#123; return password; &#125; public void setPassword(String password) &#123; this.password = password; &#125; public Set&lt;Role&gt; getRoles() &#123; return roles; &#125; public void setRoles(Set&lt;Role&gt; roles) &#123; this.roles = roles; &#125;&#125; 12345678910111213141516171819202122232425262728293031323334package com.fufu.entity;import java.util.HashSet;import java.util.Set;public class Role &#123; private Integer rid; private String name; private Set&lt;Permission&gt; permissions = new HashSet&lt;&gt;(); public Integer getRid() &#123; return rid; &#125; public void setRid(Integer rid) &#123; this.rid = rid; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public Set&lt;Permission&gt; getPermissions() &#123; return permissions; &#125; public void setPermissions(Set&lt;Permission&gt; permissions) &#123; this.permissions = permissions; &#125;&#125; 123456789101112131415161718192021package com.fufu.entity;public class Permission &#123; private Integer pid; private String name; public Integer getPid() &#123; return pid; &#125; public void setPid(Integer pid) &#123; this.pid = pid; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125;&#125; controller 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374package com.fufu.controller;import org.apache.shiro.SecurityUtils;import org.apache.shiro.authc.UsernamePasswordToken;import org.apache.shiro.authz.annotation.RequiresRoles;import org.apache.shiro.crypto.hash.SimpleHash;import org.apache.shiro.subject.Subject;import org.apache.shiro.util.ByteSource;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.bind.annotation.RestController;import javax.servlet.http.HttpSession;@Controllerpublic class LoginController&#123; //用户登录 @RequestMapping(&quot;/loginUser&quot;) public String loginUser(@RequestParam(&quot;username&quot;) String username, @RequestParam(&quot;password&quot;) String password, HttpSession session) &#123; //把前端输入的username和password封装为token UsernamePasswordToken token = new UsernamePasswordToken(username, password); Subject subject = SecurityUtils.getSubject(); try &#123; subject.login(token); session.setAttribute(&quot;user&quot;, subject.getPrincipal()); return &quot;index&quot;; &#125; catch (Exception e) &#123; return &quot;login&quot;; &#125; &#125; //退出登录 @RequestMapping(&quot;/logout&quot;) public String logout() &#123; Subject subject = SecurityUtils.getSubject(); if (subject != null) &#123; subject.logout(); &#125; return &quot;login&quot;; &#125; //访问login时跳到login.jsp @RequestMapping(&quot;/login&quot;) public String login() &#123; return &quot;login&quot;; &#125; //admin角色才能访问 @RequestMapping(&quot;/admin&quot;) @ResponseBody public String admin() &#123; return &quot;admin success&quot;; &#125; //有delete权限才能访问 @RequestMapping(&quot;/edit&quot;) @ResponseBody public String edit() &#123; return &quot;edit success&quot;; &#125; @RequestMapping(&quot;/test&quot;) @ResponseBody @RequiresRoles(&quot;guest&quot;) public String test()&#123; return &quot;test success&quot;; &#125;&#125; service 1234567891011121314151617181920212223242526package com.fufu.service;import com.fufu.config.DS;import com.fufu.entity.BlogVisitor;import com.fufu.entity.User;import com.fufu.entity.UserInfo;import com.fufu.mapper.BlogVisitorMapper;import com.fufu.mapper.UserAuthMapper;import com.fufu.mapper.UserInfoMapper;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.List;@Service@Transactionalpublic class LoginService &#123; @Autowired private UserAuthMapper userAuthMapper; //shiro鉴权 @DS(&quot;datasource1&quot;) public User findByUsername(String username) &#123; return userAuthMapper.findByUsername(username); &#125;&#125; mapper 123456789package com.fufu.mapper;import com.fufu.entity.User;import org.apache.ibatis.annotations.Mapper;@Mapperpublic interface UserAuthMapper&#123; User findByUsername(String username);&#125; mybatis的mapper.xml UserAuthMapper.xml 1234567891011121314151617181920212223242526272829&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.fufu.mapper.UserAuthMapper&quot;&gt; &lt;resultMap id=&quot;userMap&quot; type=&quot;com.fufu.entity.User&quot;&gt; &lt;id property=&quot;uid&quot; column=&quot;uid&quot;/&gt; &lt;result property=&quot;username&quot; column=&quot;user_name&quot;/&gt; &lt;result property=&quot;password&quot; column=&quot;pass_word&quot;/&gt; &lt;collection property=&quot;roles&quot; ofType=&quot;com.fufu.entity.Role&quot;&gt; &lt;id property=&quot;rid&quot; column=&quot;rid&quot;/&gt; &lt;result property=&quot;name&quot; column=&quot;role_name&quot;/&gt; &lt;collection property=&quot;permissions&quot; ofType=&quot;com.fufu.entity.Permission&quot;&gt; &lt;id property=&quot;pid&quot; column=&quot;pid&quot;/&gt; &lt;result property=&quot;name&quot; column=&quot;permission_name&quot;/&gt; &lt;/collection&gt; &lt;/collection&gt; &lt;/resultMap&gt; &lt;select id=&quot;findByUsername&quot; parameterType=&quot;string&quot; resultMap=&quot;userMap&quot;&gt; SELECT * FROM login_user u,login_role r,login_permission p WHERE u.rid=r.rid AND p.rid=r.rid AND u.user_name=#&#123;username&#125; &lt;/select&gt;&lt;/mapper&gt; jsp视图 新建webapp目录，结构如图 index.jsp 123456789101112&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;fufu登录管理系统&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;欢迎登录，$&#123;user.username&#125;&lt;/h1&gt; &lt;a href=&lt;%=request.getContextPath() +&quot;/admin&quot; %&gt;&gt;admin权限访问&lt;/a&gt; &lt;a href=&lt;%=request.getContextPath() +&quot;/test&quot; %&gt;&gt;guest权限访问&lt;/a&gt; &lt;input type = &quot;button&quot; value = &quot;登出&quot; onclick=&quot;javascript:window.location.href=&apos;/logout&apos;;&quot;&gt;&lt;/body&gt;&lt;/html&gt; login.jsp 123456789101112131415&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;登录&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;欢迎登录！&lt;/h1&gt;&lt;form action=&quot;/loginUser&quot; method=&quot;post&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;br&gt; &lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;&lt;br&gt; &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt; unauthorized.jsp 1234567891011&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Error&lt;/title&gt;&lt;/head&gt;&lt;body&gt;无相应权限!&lt;input type = &quot;button&quot; value = &quot;重新登录&quot; onclick=&quot;javascript:window.location.href=&apos;/logout&apos;;&quot;&gt;&lt;/body&gt;&lt;/html&gt; 与此同时，添加SpringBoot配置文件配置12345spring: mvc: view: prefix: /pages/ suffix: .jsp 数据库层面 三个表 12345678910111213141516171819202122232425262728293031323334/*Navicat MySQL Data TransferSource Server : localhostSource Server Version : 50610Source Host : localhost:3306Source Database : mytest1Target Server Type : MYSQLTarget Server Version : 50610File Encoding : 65001Date: 2018-11-26 15:20:59*/SET FOREIGN_KEY_CHECKS=0;-- ------------------------------ Table structure for `login_user`-- ----------------------------DROP TABLE IF EXISTS `login_user`;CREATE TABLE `login_user` ( `uid` bigint(20) NOT NULL AUTO_INCREMENT, `user_name` varchar(255) DEFAULT NULL, `pass_word` varchar(255) DEFAULT NULL, `rid` bigint(20) DEFAULT NULL, PRIMARY KEY (`uid`)) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;-- ------------------------------ Records of login_user-- ----------------------------INSERT INTO `login_user` VALUES (&apos;1&apos;, &apos;admin&apos;, &apos;df655ad8d3229f3269fad2a8bab59b6c&apos;, &apos;1&apos;);INSERT INTO `login_user` VALUES (&apos;2&apos;, &apos;guest&apos;, &apos;7c6104076beb13d44ff28e371c8da8b4&apos;, &apos;2&apos;); 1234567891011121314151617181920212223242526272829303132/*Navicat MySQL Data TransferSource Server : localhostSource Server Version : 50610Source Host : localhost:3306Source Database : mytest1Target Server Type : MYSQLTarget Server Version : 50610File Encoding : 65001Date: 2018-11-26 15:21:06*/SET FOREIGN_KEY_CHECKS=0;-- ------------------------------ Table structure for `login_role`-- ----------------------------DROP TABLE IF EXISTS `login_role`;CREATE TABLE `login_role` ( `rid` bigint(20) NOT NULL AUTO_INCREMENT, `role_name` varchar(255) DEFAULT NULL, PRIMARY KEY (`rid`)) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;-- ------------------------------ Records of login_role-- ----------------------------INSERT INTO `login_role` VALUES (&apos;1&apos;, &apos;admin&apos;);INSERT INTO `login_role` VALUES (&apos;2&apos;, &apos;guest&apos;); 123456789101112131415161718192021222324252627282930313233343536/*Navicat MySQL Data TransferSource Server : localhostSource Server Version : 50610Source Host : localhost:3306Source Database : mytest1Target Server Type : MYSQLTarget Server Version : 50610File Encoding : 65001Date: 2018-11-26 15:21:11*/SET FOREIGN_KEY_CHECKS=0;-- ------------------------------ Table structure for `login_permission`-- ----------------------------DROP TABLE IF EXISTS `login_permission`;CREATE TABLE `login_permission` ( `pid` bigint(20) NOT NULL AUTO_INCREMENT, `permission_name` varchar(255) DEFAULT NULL, `rid` bigint(20) DEFAULT NULL, PRIMARY KEY (`pid`)) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;-- ------------------------------ Records of login_permission-- ----------------------------INSERT INTO `login_permission` VALUES (&apos;1&apos;, &apos;query&apos;, &apos;1&apos;);INSERT INTO `login_permission` VALUES (&apos;2&apos;, &apos;delete&apos;, &apos;1&apos;);INSERT INTO `login_permission` VALUES (&apos;3&apos;, &apos;update&apos;, &apos;1&apos;);INSERT INTO `login_permission` VALUES (&apos;4&apos;, &apos;create&apos;, &apos;1&apos;);INSERT INTO `login_permission` VALUES (&apos;5&apos;, &apos;query&apos;, &apos;2&apos;); 这里的login_user表的密码需要自己用单元测试进行加密 1234567891011121314151617181920212223package com.fufu.httprequest;import com.fufu.SpringBootDemoApplication;import org.apache.shiro.crypto.hash.SimpleHash;import org.apache.shiro.util.ByteSource;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;@RunWith(SpringRunner.class)@SpringBootTest(classes = SpringBootDemoApplication.class)public class SpringBootDemoApplicationTests &#123; @Test public void passwordMD5() &#123; String hashAlgorithName = &quot;MD5&quot;; String password = &quot;123&quot;; int hashIterations = 1024;//加密次数 ByteSource credentialsSalt = ByteSource.Util.bytes(&quot;guest&quot;); Object obj = new SimpleHash(hashAlgorithName, password, credentialsSalt, hashIterations); System.out.println(obj); &#125;&#125; 说明我们可以用@RequiresRoles(“guest”)来指定访问角色，可以通过ShiroConfiguration里的shiroFilter过滤器来进行过滤，代码里面已经有角色和权限配置的示例了 效果图 源码：https://github.com/qq1028951741/springbootdemo or 右上角github进去，springbootdemo项目，如果对您有帮助，麻烦点下star，谢谢 人生两苦：想要却不得，拥有却失去。 –褚禄山 珍惜当下,与君共勉~]]></content>
      <categories>
        <category>SpringBoot整合系列</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot：整合mybatis-generate && 多数据源多事务 && Druid sql监控]]></title>
    <url>%2F2018%2F11%2F23%2FSpring%20Boot%EF%BC%9A%E6%95%B4%E5%90%88mybatis-generate%20%26%26%20%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E5%A4%9A%E4%BA%8B%E5%8A%A1%20%26%26%20Druid%20sql%E7%9B%91%E6%8E%A7%2F</url>
    <content type="text"><![CDATA[Spring Boot：整合mybatis-generate &amp;&amp; 多数据源多事务 &amp;&amp; Druid sql监控开头贴上整个项目目前为止的pom.xml123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.fufu&lt;/groupId&gt; &lt;artifactId&gt;springbootdemo&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;springbootdemo&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.0.1.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- springboot-aop包,AOP切面注解,Aspectd等相关注解 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.3.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.commons&lt;/groupId&gt; &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt; &lt;version&gt;3.4&lt;/version&gt; &lt;/dependency&gt; &lt;!-- json --&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;fastjson&lt;/artifactId&gt; &lt;version&gt;1.2.8&lt;/version&gt; &lt;/dependency&gt; &lt;!-- swagger2 --&gt; &lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt; &lt;version&gt;2.6.1&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt; &lt;version&gt;2.6.1&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 分页插件 --&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt; &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.2.5&lt;/version&gt; &lt;/dependency&gt; &lt;!-- alibaba的druid数据库连接池 --&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.1.9&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-core&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.datatype&lt;/groupId&gt; &lt;artifactId&gt;jackson-datatype-joda&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.module&lt;/groupId&gt; &lt;artifactId&gt;jackson-module-parameter-names&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.12&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-test&lt;/artifactId&gt; &lt;version&gt;4.3.13.RELEASE&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-test&lt;/artifactId&gt; &lt;version&gt;1.5.9.RELEASE&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt; &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.3.7&lt;/version&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 整合mybatis-generate 这里 pom.xml 里只要在build-plugin下加上generator就可以了 12345678910111213&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt; &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.3.7&lt;/version&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; 在resources下新建文件generatorConfig.xml，文件内容 123456789101112131415161718192021222324252627282930313233343536&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE generatorConfiguration PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;&lt;generatorConfiguration&gt; &lt;!-- 数据库驱动:选择你的本地硬盘上面的数据库驱动包--&gt; &lt;classPathEntry location=&quot;D:\software\apache-tomcat-7.0.52\lib\mysql-connector-java-5.1.23.jar&quot;/&gt; &lt;context id=&quot;DB2Tables&quot; targetRuntime=&quot;MyBatis3&quot;&gt; &lt;commentGenerator&gt; &lt;property name=&quot;suppressDate&quot; value=&quot;true&quot;/&gt; &lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt; &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot;/&gt; &lt;/commentGenerator&gt; &lt;!--数据库链接URL，用户名、密码 --&gt; &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot; connectionURL=&quot;jdbc:mysql://127.0.0.1/mytest2&quot; userId=&quot;root&quot; password=&quot;orcl&quot;&gt; &lt;/jdbcConnection&gt; &lt;javaTypeResolver&gt; &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot;/&gt; &lt;/javaTypeResolver&gt; &lt;!-- 生成模型的包名和位置--&gt; &lt;javaModelGenerator targetPackage=&quot;com.fufu.entity&quot; targetProject=&quot;src/main/java&quot;&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt; &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot;/&gt; &lt;/javaModelGenerator&gt; &lt;!-- 生成映射文件的包名和位置--&gt; &lt;sqlMapGenerator targetPackage=&quot;mappering&quot; targetProject=&quot;src/main/resources&quot;&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt; &lt;/sqlMapGenerator&gt; &lt;!-- 生成DAO的包名和位置--&gt; &lt;javaClientGenerator type=&quot;XMLMAPPER&quot; targetPackage=&quot;com.fufu.mapper&quot; targetProject=&quot;src/main/java&quot;&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt; &lt;/javaClientGenerator&gt; &lt;!-- 要生成的表 tableName是数据库中的表名或视图名 domainObjectName是实体类名--&gt; &lt;table tableName=&quot;user_info&quot; domainObjectName=&quot;UserInfo&quot; enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot; selectByExampleQueryId=&quot;false&quot;&gt;&lt;/table&gt; &lt;/context&gt;&lt;/generatorConfiguration&gt; 这里多数据源的也可以参考我的目录结果，多建个generator目录，需要的时候复制到外面的generatorConfig.xml文件就可以了 idea启动配置 这里要注意不要重复生成，重复生成会在**Mapper.xml添加重复的sql，这个很难发现 接下来是多数据源、多事务和Druid整合 因为要配置多数据源，所以要把DataSourceAutoConfiguration.class去掉 12在启动类上加上@SpringBootApplication(exclude = &#123;DataSourceAutoConfiguration.class&#125;) 创建DataSourceConfig类 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384package com.fufu.config;import com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceBuilder;import com.alibaba.druid.support.http.StatViewServlet;import com.alibaba.druid.support.http.WebStatFilter;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.boot.web.servlet.FilterRegistrationBean;import org.springframework.boot.web.servlet.ServletRegistrationBean;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.Primary;import org.springframework.jdbc.datasource.DataSourceTransactionManager;import org.springframework.transaction.PlatformTransactionManager;import javax.sql.DataSource;import java.util.HashMap;import java.util.Map;/** * 多数据源配置类 */@Configurationpublic class DataSourceConfig &#123; //数据源1 @Bean(name = &quot;datasource1&quot;) @ConfigurationProperties(prefix = &quot;spring.datasource.primary&quot;) // application.properteis中对应属性的前缀 public DataSource dataSource1() &#123; return DruidDataSourceBuilder.create().build(); &#125; //数据源2 @Bean(name = &quot;datasource2&quot;) @ConfigurationProperties(prefix = &quot;spring.datasource.slave&quot;) // application.properteis中对应属性的前缀 public DataSource dataSource2() &#123; return DruidDataSourceBuilder.create().build(); &#125; //druid @Bean public ServletRegistrationBean druidStatViewServlet() &#123; ServletRegistrationBean registrationBean = new ServletRegistrationBean(new StatViewServlet(), &quot;/druid/*&quot;); registrationBean.addInitParameter(&quot;allow&quot;, &quot;127.0.0.1&quot;); // IP白名单 (没有配置或者为空，则允许所有访问) registrationBean.addInitParameter(&quot;deny&quot;, &quot;&quot;); // IP黑名单 (存在共同时，deny优先于allow) registrationBean.addInitParameter(&quot;loginUsername&quot;, &quot;admin&quot;); registrationBean.addInitParameter(&quot;loginPassword&quot;, &quot;admin&quot;); registrationBean.addInitParameter(&quot;resetEnable&quot;, &quot;false&quot;); return registrationBean; &#125; @Bean public FilterRegistrationBean druidWebStatViewFilter() &#123; FilterRegistrationBean registrationBean = new FilterRegistrationBean(new WebStatFilter()); registrationBean.addInitParameter(&quot;urlPatterns&quot;, &quot;/*&quot;); registrationBean.addInitParameter(&quot;exclusions&quot;, &quot;*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*&quot;); return registrationBean; &#125; /** * 动态数据源: 通过AOP在不同数据源之间动态切换 * @return */ @Primary @Bean(name = &quot;dynamicDataSource&quot;) public DataSource dynamicDataSource() &#123; DynamicDataSource dynamicDataSource = new DynamicDataSource(); // 默认数据源 dynamicDataSource.setDefaultTargetDataSource(dataSource1()); // 配置多数据源 Map&lt;Object, Object&gt; dsMap = new HashMap(); dsMap.put(&quot;datasource1&quot;, dataSource1()); dsMap.put(&quot;datasource2&quot;, dataSource2()); dynamicDataSource.setTargetDataSources(dsMap); return dynamicDataSource; &#125; /** * 配置@Transactional注解事物 * @return */ @Bean public PlatformTransactionManager transactionManager() &#123; return new DataSourceTransactionManager(dynamicDataSource()); &#125;&#125; 创建DataSourceContextHolder类 1234567891011121314151617181920212223242526package com.fufu.config;public class DataSourceContextHolder &#123; /** * 默认数据源 */ public static final String DEFAULT_DS = &quot;datasource1&quot;; private static final ThreadLocal&lt;String&gt; contextHolder = new ThreadLocal&lt;&gt;(); // 设置数据源名 public static void setDB(String dbType) &#123; System.out.println(&quot;切换到&#123;&quot;+dbType+&quot;&#125;数据源&quot;); contextHolder.set(dbType); &#125; // 获取数据源名 public static String getDB() &#123; return (contextHolder.get()); &#125; // 清除数据源名 public static void clearDB() &#123; contextHolder.remove(); &#125;&#125; 创建DS注解动态切换数据源 123456789101112131415package com.fufu.config;import java.lang.annotation.ElementType;import java.lang.annotation.Retention;import java.lang.annotation.RetentionPolicy;import java.lang.annotation.Target;/** * 自定义注解 */@Retention(RetentionPolicy.RUNTIME)@Target(&#123;ElementType.METHOD&#125;)public @interface DS &#123; String value() default &quot;datasource1&quot;;&#125; 创建DynamicDataSource类 1234567891011package com.fufu.config;import org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;public class DynamicDataSource extends AbstractRoutingDataSource &#123; @Override protected Object determineCurrentLookupKey() &#123; System.out.println(&quot;数据源为&quot;+DataSourceContextHolder.getDB()); return DataSourceContextHolder.getDB(); &#125;&#125; 创建DynamicDataSourceAspect类 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849package com.fufu.config;import org.aspectj.lang.JoinPoint;import org.aspectj.lang.annotation.After;import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.Before;import org.aspectj.lang.reflect.MethodSignature;import org.springframework.core.annotation.Order;import org.springframework.stereotype.Component;import java.lang.reflect.Method;/** * 自定义注解 + AOP的方式实现数据源动态切换。 */@Aspect@Component@Order(0)public class DynamicDataSourceAspect &#123; @Before(&quot;@annotation(DS)&quot;) public void beforeSwitchDS(JoinPoint point)&#123; //获得当前访问的class Class&lt;?&gt; className = point.getTarget().getClass(); //获得访问的方法名 String methodName = point.getSignature().getName(); //得到方法的参数的类型 Class[] argClass = ((MethodSignature)point.getSignature()).getParameterTypes(); String dataSource = DataSourceContextHolder.DEFAULT_DS; try &#123; // 得到访问的方法对象 Method method = className.getMethod(methodName, argClass); // 判断是否存在@DS注解 if (method.isAnnotationPresent(DS.class)) &#123; DS annotation = method.getAnnotation(DS.class); // 取出注解中的数据源名 dataSource = annotation.value(); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; // 切换数据源 DataSourceContextHolder.setDB(dataSource); &#125; @After(&quot;@annotation(DS)&quot;) public void afterSwitchDS(JoinPoint point)&#123; DataSourceContextHolder.clearDB(); &#125;&#125; 这里说下我踩过的坑吧，DataSourceConfig.java中的数据源配置需要设置一个@Primary作为默认数据源 还有DynamicDataSourceAspect.java数据源切换的时候，需要加个@Order(0)，不然事务开启时，数据源也会切换失败！ 这是我的Controller层 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104package com.fufu.controller;import com.fufu.entity.BlogVisitor;import com.fufu.entity.UserInfo;import com.fufu.service.RestfulService;import com.fufu.tools.JsonUtil;import com.github.pagehelper.PageHelper;import com.github.pagehelper.PageInfo;import io.swagger.annotations.ApiImplicitParam;import io.swagger.annotations.ApiOperation;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.transaction.annotation.EnableTransactionManagement;import org.springframework.web.bind.annotation.*;import java.util.List;@RestController@EnableTransactionManagement@RequestMapping(value = &quot;/blogvisitor&quot;)public class RestfulController &#123; @Autowired RestfulService restfulService; @ApiOperation(value=&quot;添加访客&quot;, notes=&quot;添加访客&quot;) @PostMapping(value = &quot;/add&quot;, produces = &#123;&quot;application/json;charset=UTF-8&quot;&#125;) public String addBlogVisitor(@RequestBody BlogVisitor blogVisitor) &#123; try &#123; restfulService.addBlogVisitor(blogVisitor); &#125; catch (Exception e) &#123; e.printStackTrace(); return JsonUtil.getInstance().putData(&quot;ret&quot;, -1).putData(&quot;msg&quot;, &quot;保存访问者失败!&quot;).pushData(); &#125; return JsonUtil.getInstance().putData(&quot;ret&quot;, 1).putData(&quot;data&quot;,blogVisitor).putData(&quot;msg&quot;, &quot;保存访问者成功!&quot;).pushData(); &#125; @ApiOperation(value=&quot;删除访客&quot;, notes=&quot;删除访客&quot;) @ApiImplicitParam(name = &quot;id&quot;, value = &quot;访客id&quot;, required = true, dataType = &quot;Long&quot;) @GetMapping(value = &quot;/delete&quot;, produces = &#123;&quot;application/json;charset=UTF-8&quot;&#125;) public String deleteBlogVisitor(Long id) &#123; try &#123; restfulService.deleteBlogVisitor(id); &#125; catch (Exception e) &#123; e.printStackTrace(); return JsonUtil.getInstance().putData(&quot;ret&quot;, -1).putData(&quot;msg&quot;, &quot;删除访问者失败!&quot;).pushData(); &#125; return JsonUtil.getInstance().putData(&quot;ret&quot;, 1).putData(&quot;msg&quot;, &quot;删除访问者成功!&quot;).pushData(); &#125; @ApiOperation(value=&quot;更新访客&quot;, notes=&quot;更新访客&quot;) @PostMapping(value = &quot;/update&quot;, produces = &#123;&quot;application/json;charset=UTF-8&quot;&#125;) public String updateBlogVisitor(@RequestBody BlogVisitor blogVisitor) &#123; try &#123; restfulService.updateBlogVisitor(blogVisitor); &#125; catch (Exception e) &#123; e.printStackTrace(); return JsonUtil.getInstance().putData(&quot;ret&quot;, -1).putData(&quot;msg&quot;, &quot;更新访问者失败!&quot;).pushData(); &#125; return JsonUtil.getInstance().putData(&quot;ret&quot;, 1).putData(&quot;msg&quot;, &quot;更新访问者成功!&quot;).pushData(); &#125; @ApiOperation(value=&quot;查询访客列表&quot;, notes=&quot;查询访客列表&quot;) @GetMapping(value = &quot;/qry&quot;) public String qryBlogVisitorList(@RequestParam(defaultValue = &quot;1&quot;) Integer pageNum, @RequestParam(defaultValue = &quot;10&quot;) Integer pageSize) &#123; PageHelper.startPage(pageNum,pageSize); //pageNum表示页数, pageSize表示每页的大小 PageHelper.orderBy(&quot;visit_time DESC&quot;); //进行分页结果的排序，visit_time为字段名，排序规则DESC/ASC List&lt;BlogVisitor&gt; resultList = null; PageInfo pageInfo = null; try &#123; resultList = restfulService.qryBlogVisitorList(); pageInfo = new PageInfo&lt;BlogVisitor&gt;(resultList); &#125; catch (Exception e) &#123; e.printStackTrace(); return JsonUtil.getInstance().putData(&quot;ret&quot;, -1).putData(&quot;msg&quot;, &quot;查询访问者失败!&quot;).pushData(); &#125; if(resultList == null) return JsonUtil.getInstance().putData(&quot;ret&quot;, -1).putData(&quot;msg&quot;, &quot;查询不到数据!&quot;).pushData(); return JsonUtil.getInstance().putData(&quot;ret&quot;, 1).putData(&quot;data&quot;,pageInfo).putData(&quot;msg&quot;, &quot;查询访问者成功!&quot;).pushData(); &#125; @ApiOperation(value=&quot;查询用戶列表&quot;, notes=&quot;查询用戶列表&quot;) @GetMapping(value = &quot;/qryUser&quot;) public String qryUserList(@RequestParam(defaultValue = &quot;1&quot;) Integer pageNum, @RequestParam(defaultValue = &quot;10&quot;) Integer pageSize) &#123; PageHelper.startPage(pageNum,pageSize); //pageNum表示页数, pageSize表示每页的大小 List&lt;UserInfo&gt; resultList = null; PageInfo pageInfo = null; try &#123; resultList = restfulService.qryUserList(); pageInfo = new PageInfo&lt;UserInfo&gt;(resultList); &#125; catch (Exception e) &#123; e.printStackTrace(); return JsonUtil.getInstance().putData(&quot;ret&quot;, -1).putData(&quot;msg&quot;, &quot;查询用戶失败!&quot;).pushData(); &#125; if(resultList == null) return JsonUtil.getInstance().putData(&quot;ret&quot;, -1).putData(&quot;msg&quot;, &quot;查询不到数据!&quot;).pushData(); return JsonUtil.getInstance().putData(&quot;ret&quot;, 1).putData(&quot;data&quot;,pageInfo).putData(&quot;msg&quot;, &quot;查询用戶成功!&quot;).pushData(); &#125; @ApiOperation(value=&quot;添加用户&quot;, notes=&quot;添加用户&quot;) @PostMapping(value = &quot;/addUser&quot;, produces = &#123;&quot;application/json;charset=UTF-8&quot;&#125;) public String addUser(@RequestBody UserInfo userInfo) &#123; restfulService.addUserInfo(userInfo);// return JsonUtil.getInstance().putData(&quot;ret&quot;, -1).putData(&quot;msg&quot;, &quot;保存访问者失败!&quot;).pushData(); return JsonUtil.getInstance().putData(&quot;ret&quot;, 1).putData(&quot;data&quot;,userInfo).putData(&quot;msg&quot;, &quot;保存访问者成功!&quot;).pushData(); &#125;&#125; Service层 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253package com.fufu.service;import com.fufu.config.DS;import com.fufu.entity.BlogVisitor;import com.fufu.entity.UserInfo;import com.fufu.mapper.BlogVisitorMapper;import com.fufu.mapper.UserInfoMapper;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.List;@Service@Transactionalpublic class RestfulService &#123; @Autowired private BlogVisitorMapper blogVisitorMapper; @Autowired private UserInfoMapper userInfoMapper; @DS(&quot;datasource1&quot;) public void addBlogVisitor(BlogVisitor blogVisitor) &#123; blogVisitor.setVisitorName(&quot;i am tester&quot;); blogVisitorMapper.insert(blogVisitor); throw new ArithmeticException(&quot;heiheihei&quot;);//事务测试 &#125; @DS(&quot;datasource1&quot;) public void deleteBlogVisitor(Long id) &#123; blogVisitorMapper.deleteByPrimaryKey(id); &#125; @DS(&quot;datasource1&quot;) public void updateBlogVisitor(BlogVisitor blogVisitor) &#123; blogVisitorMapper.updateByPrimaryKey(blogVisitor); &#125; @DS(&quot;datasource1&quot;) public List&lt;BlogVisitor&gt; qryBlogVisitorList() &#123; return blogVisitorMapper.selectAll(); &#125; @DS(&quot;datasource2&quot;) public List&lt;UserInfo&gt; qryUserList()throws Exception &#123; return userInfoMapper.selectAll(); &#125; @DS(&quot;datasource2&quot;) public void addUserInfo(UserInfo userInfo)&#123; userInfo.setUserName(&quot;i am master&quot;); userInfoMapper.insert(userInfo);// throw new RuntimeException(&quot;heiheihei&quot;);//事务测试 &#125;&#125; SpringBoot配置文件 application.yml 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115server: port: 8080# datasource:# #使用druid连接池# type: com.alibaba.druid.pool.DruidDataSource# db1:# jdbc-url: jdbc:mysql://127.0.0.1:3306/mytest1?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false# username: root# password: orcl# driver-class-name: com.mysql.jdbc.Driver# db2:# jdbc-url: jdbc:mysql://127.0.0.1:3306/mytest2?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false# username: root# password: orcl# driver-class-name: com.mysql.jdbc.Driver## 该配置节点为独立的节点，有很多同学容易将这个配置放在spring的节点下，导致配置无法被识别mybatis: mapper-locations: classpath:/mappering/*.xml #注意：一定要对应mapper映射xml文件的所在路径 type-aliases-package: com.fufu.mapper# config-locations: classpath:mybatis/mybatis-config.xml#pagehelperpagehelper: helperDialect: mysql reasonable: true supportMethodsArguments: true params: count=countSql returnPageInfo: check# Spring configurationspring: jackson: date-format: yyyy-MM-dd HH:mm:ss time-zone: GMT+8 thymeleaf: cache: false mvc: view: prefix: /pages/ suffix: .jsp #Multi DataSource Config datasource: primary: url: jdbc:mysql://localhost:3306/mytest1 username: root password: orcl driver-class-name: com.mysql.jdbc.Driver ###################以下为druid增加的配置########################### type: com.alibaba.druid.pool.DruidDataSource # 下面为连接池的补充设置，应用到上面所有数据源中 # 初始化大小，最小，最大 initialSize: 5 minIdle: 5 maxActive: 20 # 配置获取连接等待超时的时间 maxWait: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 timeBetweenEvictionRunsMillis: 60000 # 配置一个连接在池中最小生存的时间，单位是毫秒 minEvictableIdleTimeMillis: 300000 validationQuery: SELECT 1 FROM DUAL testWhileIdle: true testOnBorrow: false testOnReturn: false # 打开PSCache，并且指定每个连接上PSCache的大小 poolPreparedStatements: true maxPoolPreparedStatementPerConnectionSize: 20 # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，&apos;wall&apos;用于防火墙，此处是filter修改的地方 filters: commons-log.connection-logger-name: stat,wall,log4j # 通过connectProperties属性来打开mergeSql功能；慢SQL记录 connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000 # 合并多个DruidDataSource的监控数据 useGlobalDataSourceStat: true slave: url: jdbc:mysql://localhost:3306/mytest2 username: root password: orcl driver-class-name: com.mysql.jdbc.Driver ###################以下为druid增加的配置########################### type: com.alibaba.druid.pool.DruidDataSource # 下面为连接池的补充设置，应用到上面所有数据源中 # 初始化大小，最小，最大 initialSize: 5 minIdle: 5 maxActive: 20 # 配置获取连接等待超时的时间 maxWait: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 timeBetweenEvictionRunsMillis: 60000 # 配置一个连接在池中最小生存的时间，单位是毫秒 minEvictableIdleTimeMillis: 300000 validationQuery: SELECT 1 FROM DUAL testWhileIdle: true testOnBorrow: false testOnReturn: false # 打开PSCache，并且指定每个连接上PSCache的大小 poolPreparedStatements: true maxPoolPreparedStatementPerConnectionSize: 20 # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，&apos;wall&apos;用于防火墙，此处是filter修改的地方 filters: commons-log.connection-logger-name: stat,wall,log4j # 通过connectProperties属性来打开mergeSql功能；慢SQL记录 connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000 # 合并多个DruidDataSource的监控数据 useGlobalDataSourceStat: true# jpa:# show-sql: true# hibernate:# ddl-auto: update# properties:# hibernate:# dialect: org.hibernate.dialect.PostgreSQLDialect druid浏览器访问: http://localhost:8080/druid/ 这里可能有同学有疑问，druid怎么就整合好了，druid整合其实很简单，pom.xml添加依赖，修改SpringBoot配置文件支持druid，最后则是DataSourceConfig里面配置两个druid初始化参数bean，我的druid的Springboot配置也就是application.yml，是适合SpringBoot 2.0的，如果配置不对应会在 http://localhost:8080/druid/ 里的显示找不到数据源。 druid效果图 感谢 这篇文章aop切换数据源主要参考自 https://blog.csdn.net/xiaosheng_papa/article/details/80218006 ，其中一个不足是切面那没加@Order，会导致数据源切换失败，并且没法实现多事务，并在这基础上增加了druid多数据源监控。 源码：https://github.com/qq1028951741/springbootdemo or 右上角github进去，springbootdemo项目，如果对您有帮助，麻烦点下star，谢谢 人生两苦：想要却不得，拥有却失去。 –褚禄山 珍惜当下,与君共勉~]]></content>
      <categories>
        <category>SpringBoot整合系列</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于SpringBoot找不到dataSource or dataSourceClassName or jdbcUrl]]></title>
    <url>%2F2018%2F11%2F19%2F%E5%85%B3%E4%BA%8ESpringBoot%E6%89%BE%E4%B8%8D%E5%88%B0dataSource%20or%20dataSourceClassName%20or%20jdbcUrl%2F</url>
    <content type="text"><![CDATA[关于SpringBoot找不到dataSource or dataSourceClassName or jdbcUrl12345配置多个数据源启动报错，error querying database. Cause: java.lang.IllegalArgumentException: dataSource or dataSourceClassName or jdbcUrl is required，主要原因是在1.0 配置数据源的过程中主要是写成：spring.datasource.url 和spring.datasource.driverClassName。而在2.0升级之后需要变更成：spring.datasource.jdbc-url和spring.datasource.driver-class-name即可解决！ 源码：https://github.com/qq1028951741/springbootdemo or 右上角github进去，springbootdemo项目，如果对您有帮助，麻烦点下star，谢谢 人生两苦：想要却不得，拥有却失去。 –褚禄山 珍惜当下,与君共勉~]]></content>
      <categories>
        <category>SpringBoot整合系列</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SpringBoot： SpringBoot：添加在mybatis基础上添加分页功能]]></title>
    <url>%2F2018%2F11%2F18%2FSpringBoot%EF%BC%9A%E6%B7%BB%E5%8A%A0%E5%9C%A8mybatis%E5%9F%BA%E7%A1%80%E4%B8%8A%E6%B7%BB%E5%8A%A0%E5%88%86%E9%A1%B5%E5%8A%9F%E8%83%BD%2F</url>
    <content type="text"><![CDATA[SpringBoot：添加在mybatis基础上添加分页功能pom.xml123456&lt;!-- 分页插件 --&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt; &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.2.5&lt;/version&gt; &lt;/dependency&gt; 在启动类SpringBootDemoApplication里面添加1234567891011@Bean public PageHelper pageHelper() &#123; System.out.println(&quot;MyBatisConfiguration.pageHelper()&quot;); PageHelper pageHelper = new PageHelper(); Properties p = new Properties(); p.setProperty(&quot;offsetAsPageNum&quot;, &quot;true&quot;); p.setProperty(&quot;rowBoundsWithCount&quot;, &quot;true&quot;); p.setProperty(&quot;reasonable&quot;, &quot;true&quot;); pageHelper.setProperties(p); return pageHelper; &#125; 然后再我们的查询接口里加上123PageHelper.startPage(pageNum,pageSize); //pageNum表示页数, pageSize表示每页的大小PageHelper.orderBy(&quot;visit_time DESC &quot;); //进行分页结果的排序，visit_time为字段名，排序规则DESC/ASCpageInfo = new PageInfo&lt;BlogVisitor&gt;(resultList);//pageInfo是用来包装查询结果，使得有分页信息返回给调用者 接口示例123456789101112131415161718@ApiOperation(value=&quot;查询访客列表&quot;, notes=&quot;查询访客列表&quot;) @GetMapping(value = &quot;/qry&quot;) public String qryBlogVisitorList(@RequestParam(defaultValue = &quot;1&quot;) Integer pageNum, @RequestParam(defaultValue = &quot;10&quot;) Integer pageSize) &#123; PageHelper.startPage(pageNum,pageSize); //pageNum表示页数, pageSize表示每页的大小 PageHelper.orderBy(&quot;visit_time DESC &quot;); //进行分页结果的排序，visit_time为字段名，排序规则DESC/ASC List&lt;BlogVisitor&gt; resultList = null; PageInfo pageInfo = null; try &#123; resultList = restfulService.qryBlogVisitorList(); pageInfo = new PageInfo&lt;BlogVisitor&gt;(resultList); &#125; catch (Exception e) &#123; e.printStackTrace(); return JsonUtil.getInstance().putData(&quot;ret&quot;, -1).putData(&quot;msg&quot;, &quot;查询访问者失败!&quot;).pushData(); &#125; if(resultList == null) return JsonUtil.getInstance().putData(&quot;ret&quot;, -1).putData(&quot;msg&quot;, &quot;查询不到数据!&quot;).pushData(); return JsonUtil.getInstance().putData(&quot;ret&quot;, 1).putData(&quot;data&quot;,pageInfo).putData(&quot;msg&quot;, &quot;查询访问者成功!&quot;).pushData(); &#125; 源码：https://github.com/qq1028951741/springbootdemo or 右上角github进去，springbootdemo项目，如果对您有帮助，麻烦点下star，谢谢 人生两苦：想要却不得，拥有却失去。 –褚禄山 珍惜当下,与君共勉~]]></content>
      <categories>
        <category>SpringBoot整合系列</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SpringBoot：Restful 接口集成swagger2 api文档]]></title>
    <url>%2F2018%2F11%2F17%2FSpringBoot%EF%BC%9ARestful%20%E6%8E%A5%E5%8F%A3%E9%9B%86%E6%88%90swagger2%20api%E6%96%87%E6%A1%A3%2F</url>
    <content type="text"><![CDATA[SpringBoot：Restful 接口集成swagger2 api文档springboot项目结构 pox.xml增加依赖1234567891011&lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt; &lt;version&gt;2.6.1&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt; &lt;version&gt;2.6.1&lt;/version&gt; &lt;/dependency&gt; config目录下新增SwaggerUI类12345678910111213141516171819202122232425262728293031323334package com.fufu.config;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import springfox.documentation.builders.ApiInfoBuilder;import springfox.documentation.builders.PathSelectors;import springfox.documentation.builders.RequestHandlerSelectors;import springfox.documentation.service.ApiInfo;import springfox.documentation.spi.DocumentationType;import springfox.documentation.spring.web.plugins.Docket;import springfox.documentation.swagger2.annotations.EnableSwagger2;@Configuration@EnableSwagger2public class SwaggerUI &#123; @Bean public Docket createRestApi() &#123; return new Docket(DocumentationType.SWAGGER_2) .apiInfo(apiInfo()) .select() .apis(RequestHandlerSelectors.basePackage(&quot;com.fufu&quot;))//指定扫描的包 .paths(PathSelectors.any()) .build(); &#125; private ApiInfo apiInfo() &#123; //api文档信息 return new ApiInfoBuilder() .title(&quot;swagger-ui构建api文档&quot;) .description(&quot;简单优雅的restful&quot;) .termsOfServiceUrl(&quot;待定&quot;) .version(&quot;1.0&quot;) .build(); &#125;&#125; Controller123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172package com.fufu.restfuldemo.controller;import com.fufu.restfuldemo.entity.BlogVisitor;import com.fufu.restfuldemo.service.RestfulService;import com.fufu.restfuldemo.tools.JsonUtil;import io.swagger.annotations.ApiImplicitParam;import io.swagger.annotations.ApiOperation;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.transaction.annotation.EnableTransactionManagement;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RestController;import java.util.List;@RestController@EnableTransactionManagement //事务管理public class RestfulController &#123; @Autowired RestfulService restfulService; @ApiOperation(value=&quot;添加访客&quot;, notes=&quot;添加访客&quot;) @RequestMapping(value = &quot;/addBlogVisitor&quot;, method = RequestMethod.POST) public String addBlogVisitor(BlogVisitor blogVisitor) &#123; try &#123; restfulService.addBlogVisitor(blogVisitor); &#125; catch (Exception e) &#123; e.printStackTrace(); return JsonUtil.getInstance().putData(&quot;ret&quot;, -1).putData(&quot;msg&quot;, &quot;保存访问者失败!&quot;).pushData(); &#125; return JsonUtil.getInstance().putData(&quot;ret&quot;, 1).putData(&quot;data&quot;,blogVisitor).putData(&quot;msg&quot;, &quot;保存访问者成功!&quot;).pushData(); &#125; @ApiOperation(value=&quot;删除访客&quot;, notes=&quot;删除访客&quot;) @ApiImplicitParam(name = &quot;id&quot;, value = &quot;访客id&quot;, required = true, dataType = &quot;Long&quot;) @RequestMapping(value = &quot;/deleteBlogVisitor&quot;,method = RequestMethod.DELETE) public String deleteBlogVisitor(Long id) &#123; try &#123; restfulService.deleteBlogVisitor(id); &#125; catch (Exception e) &#123; e.printStackTrace(); return JsonUtil.getInstance().putData(&quot;ret&quot;, -1).putData(&quot;msg&quot;, &quot;删除访问者失败!&quot;).pushData(); &#125; return JsonUtil.getInstance().putData(&quot;ret&quot;, 1).putData(&quot;msg&quot;, &quot;删除访问者成功!&quot;).pushData(); &#125; @ApiOperation(value=&quot;更新访客&quot;, notes=&quot;更新访客&quot;) @RequestMapping(value = &quot;/updateBlogVisitor&quot;,method = RequestMethod.POST) public String updateBlogVisitor(BlogVisitor blogVisitor) &#123; try &#123; restfulService.updateBlogVisitor(blogVisitor); &#125; catch (Exception e) &#123; e.printStackTrace(); return JsonUtil.getInstance().putData(&quot;ret&quot;, -1).putData(&quot;msg&quot;, &quot;更新访问者失败!&quot;).pushData(); &#125; return JsonUtil.getInstance().putData(&quot;ret&quot;, 1).putData(&quot;msg&quot;, &quot;更新访问者成功!&quot;).pushData(); &#125; @ApiOperation(value=&quot;查询访客列表&quot;, notes=&quot;查询访客列表&quot;) @RequestMapping(value = &quot;/qryBlogVisitorList&quot;,method = RequestMethod.GET) public String qryBlogVisitorList() &#123; List&lt;BlogVisitor&gt; resultList = null; try &#123; resultList = restfulService.qryBlogVisitorList(); &#125; catch (Exception e) &#123; e.printStackTrace(); return JsonUtil.getInstance().putData(&quot;ret&quot;, -1).putData(&quot;msg&quot;, &quot;查询访问者失败!&quot;).pushData(); &#125; if(resultList == null) return JsonUtil.getInstance().putData(&quot;ret&quot;, -1).putData(&quot;msg&quot;, &quot;查询不到数据!&quot;).pushData(); return JsonUtil.getInstance().putData(&quot;ret&quot;, 1).putData(&quot;data&quot;,resultList).putData(&quot;msg&quot;, &quot;查询访问者成功!&quot;).pushData(); &#125;&#125; 访问swagger2从springboot第一篇文章 SpringBoot：Restful 接口示例 得知我们server port为8090，所以访问http://localhost:8090/swagger-ui.html 效果图 源码：https://github.com/qq1028951741/springbootdemo or 右上角github进去，springbootdemo项目，如果对您有帮助，麻烦点下star，谢谢 人生两苦：想要却不得，拥有却失去。 –褚禄山 珍惜当下,与君共勉~]]></content>
      <categories>
        <category>SpringBoot整合系列</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JsonUtil操作类]]></title>
    <url>%2F2018%2F11%2F16%2FJsonUtil%E6%93%8D%E4%BD%9C%E7%B1%BB%2F</url>
    <content type="text"><![CDATA[JsonUtil操作类json工具类1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465package com.fufu.restfuldemo.tools;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONObject;/** * json操作类 */public class JsonUtil &#123; private JSONObject jo; private JsonUtil() &#123; &#125; /** * 获取单例 * * @return */ public static JsonUtil getInstance() &#123; return new JsonUtil(); &#125; /** * 将数据装载到json里面支持链式 * * @param key * @param value * @return */ public JsonUtil putData(String key, Object value) &#123; if (jo == null) &#123; jo = new JSONObject(); &#125; jo.put(key, value == null ? &quot;&quot; : value); return this; &#125; /** * 将JSONObject转成字符并置为空 * * @return */ public String pushData() &#123; if (jo != null) &#123; JSONObject _jo = jo; jo = null; return JSON.toJSONStringWithDateFormat(_jo, &quot;yyyy-MM-dd HH:mm:ss&quot;); &#125; else &#123; return null; &#125; &#125; /** * 获取jsonObject * s * @return */ public JSONObject getJo() &#123; return jo; &#125; &#125; 用法1JsonUtil.getInstance().putData(&quot;ret&quot;, 1).putData(&quot;data&quot;,一个object).putData(&quot;msg&quot;, &quot;保存访问者成功!&quot;).pushData();//返回json string 该工具的有点就是支持链式化拼接json，另外结合了fastjson的toJSONStringWithDateFormat解决了mybatis查询出来的日期为时间戳格式的问题。 人生两苦：想要却不得，拥有却失去。 –褚禄山 珍惜当下,与君共勉~]]></content>
      <categories>
        <category>开发日常记录</category>
      </categories>
      <tags>
        <tag>JsonUtil</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[fastjson java后台json数据格式转化]]></title>
    <url>%2F2018%2F11%2F16%2Ffastjson%20java%E5%90%8E%E5%8F%B0json%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E8%BD%AC%E5%8C%96%2F</url>
    <content type="text"><![CDATA[fastjson java后台json数据格式转化maven123456&lt;!-- json --&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;fastjson&lt;/artifactId&gt; &lt;version&gt;1.2.8&lt;/version&gt; &lt;/dependency&gt; 数据格式转换12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758/** * 序列化 */ public void toJsonString() &#123; User user = new User(&quot;testFastJson001&quot;, &quot;maks&quot;, 105); String text = JSON.toJSONString(user); System.out.println(&quot;toJsonString()方法：text=&quot; + text); // 输出结果：text=&#123;&quot;age&quot;:105,&quot;id&quot;:&quot;testFastJson001&quot;,&quot;name&quot;:&quot;maks&quot;&#125; &#125; /** * 反序列化为json对象 */ public void parseJsonObject() &#123; String text = &quot;&#123;\&quot;age\&quot;:105,\&quot;id\&quot;:\&quot;testFastJson001\&quot;,\&quot;name\&quot;:\&quot;maks\&quot;&#125;&quot;; JSONObject json = JSON.parseObject(text); System.out.println(&quot;parseJsonObject()方法：json==&quot; + json); // 输出结果：json==&#123;&quot;age&quot;:105,&quot;id&quot;:&quot;testFastJson001&quot;,&quot;name&quot;:&quot;maks&quot;&#125; &#125; /** * 反序列化为javaBean对象 */ public void parseBeanObject() &#123; String text = &quot;&#123;\&quot;age\&quot;:105,\&quot;id\&quot;:\&quot;testFastJson001\&quot;,\&quot;name\&quot;:\&quot;maks\&quot;&#125;&quot;; User user = (User) JSON.parseObject(text, User.class); System.out.println(&quot;parseBeanObject()方法：user==&quot; + user.getId() + &quot;,&quot; + user.getName() + &quot;,&quot; + user.getAge()); // 输出结果：user==testFastJson001,maks,105 &#125; /** * 将javaBean转化为json对象 */ public void bean2Json() &#123; User user = new User(&quot;testFastJson001&quot;, &quot;maks&quot;, 105); JSONObject jsonObj = (JSONObject) JSON.toJSON(user); System.out.println(&quot;bean2Json()方法：jsonObj==&quot; + jsonObj); // 输出结果：jsonObj==&#123;&quot;age&quot;:105,&quot;id&quot;:&quot;testFastJson001&quot;,&quot;name&quot;:&quot;maks&quot;&#125; &#125; /** * 全序列化 直接把java bean序列化为json文本之后，能够按照原来的类型反序列化回来。支持全序列化，需要打开SerializerFeature.WriteClassName特性 */ public void parseJSONAndBeanEachother() &#123; User user = new User(&quot;testFastJson001&quot;, &quot;maks&quot;, 105); SerializerFeature[] featureArr = &#123; SerializerFeature.WriteClassName &#125;; String text = JSON.toJSONString(user, featureArr); System.out.println(&quot;parseJSONAndBeanEachother()方法：text==&quot; + text); // 输出结果：text==&#123;&quot;@type&quot;:&quot;fastJson.test.User&quot;,&quot;age&quot;:105,&quot;id&quot;:&quot;testFastJson001&quot;,&quot;name&quot;:&quot;maks&quot;&#125; User userObj = (User) JSON.parse(text); System.out.println(&quot;parseJSONAndBeanEachother()方法：userObj==&quot; + userObj.getId() + &quot;,&quot; + userObj.getName() + &quot;,&quot; + userObj.getAge()); // 输出结果：userObj==testFastJson001,maks,105 &#125; 人生两苦：想要却不得，拥有却失去。 –褚禄山 珍惜当下,与君共勉~]]></content>
      <categories>
        <category>开发日常记录</category>
      </categories>
      <tags>
        <tag>fastjson</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[http请求工具类]]></title>
    <url>%2F2018%2F11%2F16%2Fhttp%E8%AF%B7%E6%B1%82%E5%B7%A5%E5%85%B7%E7%B1%BB%2F</url>
    <content type="text"><![CDATA[http请求工具类 这个一个能自己配置请求url、请求方法、请求的媒体类型信息、请求的参数的http工具类 HttpUtil类1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556package com.fufu.httprequest.tools;import java.io.BufferedReader;import java.io.DataOutputStream;import java.io.InputStreamReader;import java.net.HttpURLConnection;import java.net.URL;import java.util.List;import java.util.Map;public class HttpUtil &#123; public static String httpRequest(String generalUrl,String requestMethod, String contentType, String params) throws Exception &#123; String encoding = &quot;UTF-8&quot;; if (generalUrl.contains(&quot;nlp&quot;)) &#123; encoding = &quot;GBK&quot;; &#125; URL url = new URL(generalUrl); // 打开和URL之间的连接 HttpURLConnection connection = (HttpURLConnection) url.openConnection(); connection.setRequestMethod(requestMethod); // 设置通用的请求属性 connection.setRequestProperty(&quot;Content-Type&quot;, contentType); connection.setRequestProperty(&quot;Connection&quot;, &quot;Keep-Alive&quot;); connection.setUseCaches(false); connection.setDoOutput(true); connection.setDoInput(true); // 得到请求的输出流对象 DataOutputStream out = new DataOutputStream(connection.getOutputStream()); out.write(params.getBytes(encoding)); out.flush(); out.close(); // 建立实际的连接 connection.connect(); // 获取所有响应头字段 Map&lt;String, List&lt;String&gt;&gt; headers = connection.getHeaderFields(); // 遍历所有的响应头字段// for (String key : headers.keySet()) &#123;// System.err.println(key + &quot;---&gt;&quot; + headers.get(key));// &#125; // 定义 BufferedReader输入流来读取URL的响应 BufferedReader in = null; in = new BufferedReader( new InputStreamReader(connection.getInputStream(), encoding)); String result = &quot;&quot;; String getLine; while ((getLine = in.readLine()) != null) &#123; result += getLine; &#125; in.close();// System.err.println(&quot;result:&quot; + result); return result; &#125;&#125; test方法12345678910111213141516171819202122232425package com.fufu.httprequest;import com.fufu.httprequest.tools.HttpUtil;import net.sf.json.JSONObject;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;@RunWith(SpringRunner.class)@SpringBootTestpublic class HttprequestApplicationTests &#123; @Test public void contextLoads() &#123; try &#123; String result = HttpUtil.httpRequest(&quot;http://localhost:8080/robotservice/visitorRecord/qryVisitedUnit&quot;,&quot;POST&quot;,&quot;application/x-www-form-urlencoded&quot;,&quot;telNum=1555&quot;); JSONObject jobj = JSONObject.fromObject(result); System.out.println(jobj.toString()); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125;&#125; 人生两苦：想要却不得，拥有却失去。 –褚禄山 珍惜当下,与君共勉~]]></content>
      <categories>
        <category>开发日常记录</category>
      </categories>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SpringBoot： Restful 接口示例]]></title>
    <url>%2F2018%2F11%2F16%2FSpringBoot%EF%BC%9ARestful%20%E6%8E%A5%E5%8F%A3%E7%A4%BA%E4%BE%8B%2F</url>
    <content type="text"><![CDATA[SpringBoot： Restful 接口示例新建springboot工程 工程目录 pom.xml12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.fufu&lt;/groupId&gt; &lt;artifactId&gt;springbootdemo&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;springbootdemo&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.1.0.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;!-- json --&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;fastjson&lt;/artifactId&gt; &lt;version&gt;1.2.8&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 数据库连接依赖 --&gt; &lt;!-- 添加 MyBatis --&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.2.0&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 添加 MySQL --&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;5.1.41&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; application.properties123456spring.datasource.url=jdbc:mysql://127.0.0.1:3306/root?useUnicode=true&amp;characterEncoding=UTF-8spring.datasource.username=rootspring.datasource.password=123456spring.datasource.driver-class-name=com.mysql.jdbc.Driverserver.port=8090 mysql sql执行12345678910111213141516171819202122232425262728293031323334353637/*Navicat MySQL Data TransferSource Server : localhostSource Server Version : 50610Source Host : localhost:3306Source Database : robotTarget Server Type : MYSQLTarget Server Version : 50610File Encoding : 65001Date: 2018-11-16 16:05:04*/SET FOREIGN_KEY_CHECKS=0;-- ------------------------------ Table structure for `blog_visitor`-- ----------------------------DROP TABLE IF EXISTS `blog_visitor`;CREATE TABLE `blog_visitor` ( `id` bigint(20) NOT NULL AUTO_INCREMENT, `visitor_name` varchar(255) DEFAULT NULL COMMENT &apos;来访姓名&apos;, `visitor_gender` varchar(255) DEFAULT NULL COMMENT &apos;来访者性别&apos;, `visitor_reason` varchar(255) DEFAULT NULL COMMENT &apos;来访事由&apos;, `visit_time` datetime DEFAULT NULL COMMENT &apos;访问时间&apos;, PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8;-- ------------------------------ Records of blog_visitor-- ----------------------------INSERT INTO `blog_visitor` VALUES (&apos;1&apos;, &apos;徐凤年&apos;, &apos;男&apos;, &apos;到此一游&apos;, &apos;2018-11-15 15:11:22&apos;);INSERT INTO `blog_visitor` VALUES (&apos;2&apos;, &apos;姜妮&apos;, &apos;女&apos;, &apos;我跟徐凤年来的&apos;, &apos;2018-11-15 15:11:22&apos;);INSERT INTO `blog_visitor` VALUES (&apos;3&apos;, &apos;南北&apos;, &apos;男&apos;, &apos;我跟东西来的&apos;, &apos;2018-11-15 15:11:22&apos;);INSERT INTO `blog_visitor` VALUES (&apos;4&apos;, &apos;东西&apos;, &apos;女&apos;, &apos;本侠女要来的&apos;, &apos;2018-11-15 15:11:22&apos;); entity123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051package com.fufu.entity;import java.util.Date;public class BlogVisitor &#123; private int id ; private String visitorName ; private String visitorGender; private String visitorReason; private Date visitTime; public int getId() &#123; return id; &#125; public void setId(int id) &#123; this.id = id; &#125; public String getVisitorName() &#123; return visitorName; &#125; public void setVisitorName(String visitorName) &#123; this.visitorName = visitorName; &#125; public String getVisitorGender() &#123; return visitorGender; &#125; public void setVisitorGender(String visitorGender) &#123; this.visitorGender = visitorGender; &#125; public String getVisitorReason() &#123; return visitorReason; &#125; public void setVisitorReason(String visitorReason) &#123; this.visitorReason = visitorReason; &#125; public Date getVisitTime() &#123; return visitTime; &#125; public void setVisitTime(Date visitTime) &#123; this.visitTime = visitTime; &#125;&#125; controller12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364package com.fufu.controller;import com.fufu.entity.BlogVisitor;import com.fufu.service.RestfulService;import com.fufu.tools.JsonUtil;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.transaction.annotation.EnableTransactionManagement;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import java.util.List;@RestController@EnableTransactionManagement //事务管理@RequestMapping(&quot;/restfulapi&quot;)public class RestfulController &#123; @Autowired RestfulService restfulService; @RequestMapping(value = &quot;/addBlogVisitor&quot;, method = RequestMethod.POST) public String addBlogVisitor(BlogVisitor blogVisitor) &#123; try &#123; restfulService.addBlogVisitor(blogVisitor); &#125; catch (Exception e) &#123; e.printStackTrace(); return JsonUtil.getInstance().putData(&quot;ret&quot;, -1).putData(&quot;msg&quot;, &quot;保存访问者失败!&quot;).pushData(); &#125; return JsonUtil.getInstance().putData(&quot;ret&quot;, 1).putData(&quot;data&quot;,blogVisitor).putData(&quot;msg&quot;, &quot;保存访问者成功!&quot;).pushData(); &#125; @RequestMapping(value = &quot;/deleteBlogVisitor&quot;,method = RequestMethod.DELETE) public String deleteBlogVisitor(Long id) &#123; try &#123; restfulService.deleteBlogVisitor(id); &#125; catch (Exception e) &#123; e.printStackTrace(); return JsonUtil.getInstance().putData(&quot;ret&quot;, -1).putData(&quot;msg&quot;, &quot;删除访问者失败!&quot;).pushData(); &#125; return JsonUtil.getInstance().putData(&quot;ret&quot;, 1).putData(&quot;msg&quot;, &quot;删除访问者成功!&quot;).pushData(); &#125; @RequestMapping(value = &quot;/updateBlogVisitor&quot;,method = RequestMethod.POST) public String updateBlogVisitor(BlogVisitor blogVisitor) &#123; try &#123; restfulService.updateBlogVisitor(blogVisitor); &#125; catch (Exception e) &#123; e.printStackTrace(); return JsonUtil.getInstance().putData(&quot;ret&quot;, -1).putData(&quot;msg&quot;, &quot;更新访问者失败!&quot;).pushData(); &#125; return JsonUtil.getInstance().putData(&quot;ret&quot;, 1).putData(&quot;msg&quot;, &quot;更新访问者成功!&quot;).pushData(); &#125; @RequestMapping(value = &quot;/qryBlogVisitorList&quot;,method = RequestMethod.GET) public String qryBlogVisitorList() &#123; List&lt;BlogVisitor&gt; resultList = null; try &#123; resultList = restfulService.qryBlogVisitorList(); &#125; catch (Exception e) &#123; e.printStackTrace(); return JsonUtil.getInstance().putData(&quot;ret&quot;, -1).putData(&quot;msg&quot;, &quot;查询访问者失败!&quot;).pushData(); &#125; if(resultList == null) return JsonUtil.getInstance().putData(&quot;ret&quot;, -1).putData(&quot;msg&quot;, &quot;查询不到数据!&quot;).pushData(); return JsonUtil.getInstance().putData(&quot;ret&quot;, 1).putData(&quot;data&quot;,resultList).putData(&quot;msg&quot;, &quot;查询访问者成功!&quot;).pushData(); &#125;&#125; 这里的JsonUtil请参考本blog工具类文章 JsonUtil操作类 mybatis查询出来的日期为时间戳格式，我这边是在JsonUtil里用fastjson统一进行日期格式化 service12345678910111213141516171819202122232425262728293031323334353637383940package com.fufu.service;import com.fufu.dao.BlogVisitorMapper;import com.fufu.entity.BlogVisitor;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.List;@Service@Transactionalpublic class RestfulService &#123; @Autowired private BlogVisitorMapper blogVisitorMapper; public void addBlogVisitor(BlogVisitor blogVisitor)throws Exception &#123; blogVisitorMapper.addBlogVisitor(blogVisitor); throw new RuntimeException(&quot;heiheihei&quot;);//事务测试 &#125; public void deleteBlogVisitor(Long id) &#123; blogVisitorMapper.deleteBlogVisitor(id); &#125; public void updateBlogVisitor(BlogVisitor blogVisitor) &#123; blogVisitorMapper.updateBlogVisitor(blogVisitor); &#125; public List&lt;BlogVisitor&gt; qryBlogVisitorList() &#123; return blogVisitorMapper.qryBlogVisitorList(); &#125; public BlogVisitorMapper getBlogVisitorMapper() &#123; return blogVisitorMapper; &#125; public void setBlogVisitorMapper(BlogVisitorMapper blogVisitorMapper) &#123; this.blogVisitorMapper = blogVisitorMapper; &#125;&#125; dao123456789101112131415161718192021package com.fufu.dao;import com.fufu.entity.BlogVisitor;import org.apache.ibatis.annotations.*;import java.util.List;@Mapperpublic interface BlogVisitorMapper &#123; @Insert(&quot;insert into blog_visitor(visitor_name, visitor_gender, visitor_reason, visit_time) values(#&#123;visitorName&#125;, #&#123;visitorGender&#125;, #&#123;visitorReason&#125;, #&#123;visitTime&#125;)&quot;) @Options(useGeneratedKeys = true, keyColumn = &quot;id&quot;, keyProperty = &quot;id&quot;) void addBlogVisitor(BlogVisitor blogVisitor); @Delete(&quot;delete from blog_visitor where id = #&#123;id&#125;&quot;) void deleteBlogVisitor(@Param(&quot;id&quot;) Long id); @Update(&quot;update blog_visitor set visitor_name = #&#123;visitorName&#125;, visitor_gender = #&#123;visitorGender&#125;, visitor_reason = #&#123;visitorReason&#125;, visit_time = #&#123;visitTime&#125; where id = #&#123;id&#125;&quot;) void updateBlogVisitor(BlogVisitor blogVisitor); @Select(&quot;select id, visitor_name as visitorName, visitor_gender as visitorGender, visitor_reason as visitorReason, visit_time as visitTime from blog_visitor&quot;) List&lt;BlogVisitor&gt; qryBlogVisitorList();&#125; 源码：https://github.com/qq1028951741/springbootdemo or 右上角github进去，springbootdemo项目，如果对您有帮助，麻烦点下star，谢谢 人生两苦：想要却不得，拥有却失去。 –褚禄山 珍惜当下,与君共勉~]]></content>
      <categories>
        <category>SpringBoot整合系列</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java 中 byte[\]、File、InputStream 互相转换]]></title>
    <url>%2F2018%2F11%2F16%2Fjava%20%E4%B8%AD%20byte%5B%5D%E3%80%81File%E3%80%81InputStream%20%E4%BA%92%E7%9B%B8%E8%BD%AC%E6%8D%A2%2F</url>
    <content type="text"><![CDATA[java 中 byte[]、File、InputStream 互相转换 将File、FileInputStream 转换为byte数组： 1234567File file = new File(&quot;test.txt&quot;);InputStream input = new FileInputStream(file);byte[] byt = new byte[input.available()];input.read(byt); 将byte数组转换为InputStream： 123byte[] byt = new byte[1024];InputStream input = new ByteArrayInputStream(byt); 将byte数组转换为File : 1234567File file = new File(&apos;&apos;);OutputStream output = new FileOutputStream(file);BufferedOutputStream bufferedOutput = new BufferedOutputStream(output);bufferedOutput.write(byt); 人生两苦：想要却不得，拥有却失去。 –褚禄山 珍惜当下,与君共勉~]]></content>
      <categories>
        <category>开发日常记录</category>
      </categories>
      <tags>
        <tag>byte</tag>
        <tag>File</tag>
        <tag>InputStream</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[图片base64编码转MultipartFile]]></title>
    <url>%2F2018%2F11%2F15%2F%E5%9B%BE%E7%89%87base64%E7%BC%96%E7%A0%81%E8%BD%ACMultipartFile%2F</url>
    <content type="text"><![CDATA[图片base64编码转MultipartFiletips:图片base64编码传到后端还需要经过url编码，否则会出现+号丢失新建BASE64DecodedMultipartFile类实现MultipartFile123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960package com.*.tools;import org.springframework.web.multipart.MultipartFile;import java.io.*;public class BASE64DecodedMultipartFile implements MultipartFile &#123; private final byte[] imgContent; private final String header; public BASE64DecodedMultipartFile(byte[] imgContent, String header) &#123; this.imgContent = imgContent; this.header = header.split(&quot;;&quot;)[0]; &#125; @Override public String getName() &#123; // TODO - implementation depends on your requirements return System.currentTimeMillis() + Math.random() + &quot;.&quot; + header.split(&quot;/&quot;)[1]; &#125; @Override public String getOriginalFilename() &#123; // TODO - implementation depends on your requirements return System.currentTimeMillis() + (int)Math.random() * 10000 + &quot;.&quot; + header.split(&quot;/&quot;)[1]; &#125; @Override public String getContentType() &#123; // TODO - implementation depends on your requirements return header.split(&quot;:&quot;)[1]; &#125; @Override public boolean isEmpty() &#123; return imgContent == null || imgContent.length == 0; &#125; @Override public long getSize() &#123; return imgContent.length; &#125; @Override public byte[] getBytes() throws IOException &#123; return imgContent; &#125; @Override public InputStream getInputStream() throws IOException &#123; return new ByteArrayInputStream(imgContent); &#125; @Override public void transferTo(File dest) throws IOException, IllegalStateException &#123; new FileOutputStream(dest).write(imgContent); &#125;&#125; 新建tools.java，在里面里添加123456789101112131415161718 //base64转Multipartpublic static MultipartFile base64ToMultipart(String base64) &#123; try &#123; String[] baseStrs = base64.split(&quot;,&quot;); BASE64Decoder decoder = new BASE64Decoder(); byte[] b = new byte[0]; b = decoder.decodeBuffer(baseStrs[1]); for(int i = 0; i &lt; b.length; ++i) &#123; if (b[i] &lt; 0) &#123; b[i] += 256; &#125; &#125; return new BASE64DecodedMultipartFile(b, baseStrs[0]); &#125; catch (IOException e) &#123; e.printStackTrace(); return null; &#125;&#125; 代码调用1MultipartFile file = tools.base64ToMultipart(&quot;你的图片base64编码，这之前要先urldecode&quot;); 人生两苦：想要却不得，拥有却失去。 –褚禄山 珍惜当下,与君共勉~]]></content>
      <categories>
        <category>开发日常记录</category>
      </categories>
      <tags>
        <tag>编码</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[让hexo-blog更像一个blog]]></title>
    <url>%2F2018%2F11%2F10%2Fhexo2%2F</url>
    <content type="text"><![CDATA[让hexo-blog更像一个blog hexo自带的blog样本可能不太满足我们对一个blog的追求，所以我们可以对站点配置和主题配置文件进行相应修改 我们先给hexo-选择一个主题可以从https://github.com/hexojs/hexo/wiki/Themes 选择一个喜欢的主题，到对应github复制地址，git clone到hexo文件夹 git clone git@github.com:litten/hexo-theme-yilia.git themes/yilia 配置文件位置12345678910111213.├── .deploy #需要部署的文件├── node_modules #Hexo插件├── public #生成的静态网页文件├── scaffolds #模板├── source #博客正文和其他源文件, 404 favicon CNAME 等都应该放在这里| ├── _drafts #草稿| └── _posts #文章├── themes #主题| ├── 主题名 #主题名| ├── _config.yml 我是主题配置文件├── _config.yml #全局配置文件 我是站点配置文件└── package.json 以上站点配置文件和主题配置文件位置 配置文件配置 站点配置文件 改博客title，描述，汉化，时区，主题 12345678910111213# Site blog信息设置title: 燃情岁月subtitle: 嘿嘿嘿description: fufublogkeywords:author: fufualanguage: zh-CNtimezone: Asia/Shanghai #广州貌似没有 用上海了# Extensions 主题设置## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next 主题配置文件 这里主要改了主题风格和侧边栏显示位置、菜单改成了中文 1234567891011121314151617181920# Schemes 这里是四种主题风格选择#scheme: Muse#scheme: Mist#scheme: Piscesscheme: Gemini#侧边栏位置设置sidebar: # Sidebar Position, available value: left | right (only for Pisces | Gemini). #position: left position: right#菜单设置 menu: 主页: / || home #archives: /archives 目录: /categories || th 标签: /tags || tags #commonweal: /404.html 关于我: /about || user# Enable/Disable menu icons / item badges.# ||后面是图标指向 为菜单加点料 hexo文件夹中右击git bash here 依次键入hexo new page tags、hexo new page categories、hexo new page about 12345678910111213. ├── source #博客正文和其他源文件, 404 favicon CNAME 等都应该放在这里 | ├── _posts #文章 | ├── about #关于我 | ├── categories #目录 | ├── index.md #markdown文件 | ├── images #图片 | └── tags #标签 ├── themes #主题 | ├── 主题名 #主题名 | ├── _config.yml 我是主题配置文件 ├── _config.yml #全局配置文件 我是站点配置文件 └── package.json 以categories为例，修改index.md，type一定要有 123456---title: 目录date: 2018-11-10 09:57:57type: &quot;categories&quot;comments: false--- 这是about的index.md 123456---title: 关于我date: 2018-11-10 09:59:15comments: false---我就是我，不一样的烟火~ 关于新增一篇文章这边有两种方法 git bash，键入hexo new 我是一个栗子 或直接在_posts新建.md文件 修改.md文件，栗子 12345678910---title: 我是一个栗子date: 2018-11-10 10:18:13categories:- 栗子tags:- hexo---&lt;Excerpt in index | 首页摘要&gt; &lt;!-- more --&gt;&lt;The rest of contents | 余下全文&gt; 下面你想怎么markdown就怎么markdown more是为了在首页可以不显示整篇文章 来个blog头像 主题配置文件配置 123avatar: #这个是主题source下的image文件夹 url: /images/header.jpg 效果图 人生两苦：想要却不得，拥有却失去。 –褚禄山 珍惜当下,与君共勉~]]></content>
      <categories>
        <category>hexo-blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我是一个栗子]]></title>
    <url>%2F2018%2F11%2F10%2F%E6%88%91%E6%98%AF%E4%B8%80%E4%B8%AA%E6%A0%97%E5%AD%90%2F</url>
    <content type="text"><![CDATA[网站:This is an example link.]]></content>
      <categories>
        <category>栗子</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>栗子</tag>
        <tag>我也是一个栗子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[为hexo-blog增加评论功能]]></title>
    <url>%2F2018%2F11%2F10%2Fhexo4%2F</url>
    <content type="text"><![CDATA[为hexo-blog增加评论功能 如果一个博客活着不是为了相互交流，那么我们开始吧，评论功能主要用LeanCloud+Valine集成的。 先注册LeanCloud网址：https://leancloud.cn/ LeanCloud操作 创建应用 进入设置，安全中心选项设置安全域名 存储选项中创建Class，相当于一个放评论的数据库表 进入设置，应用key选项，记下appid和appkey Valine这边hexo相关主题已经有相应配置 具体参考 在hexo中的使用https://valine.js.org/hexo.html 所以只需修改我们hexo中主题的配置文件 123456789101112valine: enable: true appid: appkey: notify: false # mail notifier , https://github.com/xCss/Valine/wiki verify: false # Verification code placeholder: 友善发言的人运气不会太差~ --小黄即 avatar: mm # gravatar style 头像设置看上面那个网址 #avatar: wavatar guest_info: nick,mail,link # custom comment header pageSize: 10 # pagination size visitor: true 部署git bash 键入 hexo d -g ,访问 http://你的用户名.github.io/ 效果图 人生两苦：想要却不得，拥有却失去。 –褚禄山 珍惜当下,与君共勉~]]></content>
      <categories>
        <category>hexo-blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[将hexo-blog部署到github]]></title>
    <url>%2F2018%2F11%2F10%2Fhexo3%2F</url>
    <content type="text"><![CDATA[将hexo-blog部署到github注册github创建仓库Create a new repository 记住自己取的repository name 将hexo和github关联起来 hexo文件夹，鼠标右键，点击Git Base Here，键入 12git config --global user.name &quot;你的GitHub用户名&quot;git config --global user.email &quot;你的GitHub注册邮箱&quot; 新建一个文件存放生成的ssh密匙文件，鼠标右键，点击Git Base Here 1ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot; 生成两个文件id_rsa和id_rsa.pub 在github上添加公匙 用户头像→Settings→SSH and GPG keys→New SSH key→将id_rsa.pub中的内容复制到Key文本框中，然后点击Add SSH key(添加SSH)按钮。 修改hexo站点配置文件 123456789# Deployment 注释## Docs: https://hexo.io/docs/deployment.htmldeploy: # 类型 type: git # 仓库 repo: git@github.com:你的用户名/你的用户名.github.io.git # 分支 branch: master 部署hexo到github123456# 清空静态页面hexo clean# 生成静态页面hexo generate# 部署 hexo deploy 访问 https://你的用户名.github.io/ ，也可去仓库那看看自己的链接 人生两苦：想要却不得，拥有却失去。 –褚禄山 珍惜当下,与君共勉~]]></content>
      <categories>
        <category>hexo-blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[美化hexo-blog]]></title>
    <url>%2F2018%2F11%2F10%2Fhexo5%2F</url>
    <content type="text"><![CDATA[屏蔽blog网页底部强力驱动主题配置文件配置如下 123456789101112copyright:powered: # Hexo link (Powered by Hexo). enable: false # Version info of Hexo after Hexo link (vX.X.X). version: falsetheme: # Theme &amp; scheme info link (Theme - NexT.scheme). enable: false # Version info of NexT after scheme info (vX.X.X). version: false 更改底部footer图标 找到喜欢的图标 https:/www.thinkcmf.com/font/font_awesome/icons.html 主题配置文件修改 123footer: icon: name: star-o 每个图标都有对应的class，如下 1&lt;i class=&quot;fa fa-star-o&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; 我们取class fa fa-后面的名字填写在主题配置文件相应位置 让图标跳动起来 查看 123456. ├── source ├── themes #主题 | ├── next #主题名 | ├── layout | ├── _partials 下的footer.swig 文件的 &lt;span class=&quot;with-love&quot; id=&quot;animate&quot;&gt; 在一下位置修改custom.styl 1234567. ├── source ├── themes #主题 | ├── next #主题名 | ├── source | ├── css | ├── _custom 新增 12345678910111213// 自定义页脚跳动样式@keyframes heartAnimate &#123; 0%,100%&#123;transform:scale(1);&#125; 10%,30%&#123;transform:scale(0.9);&#125; 20%,40%,60%,80%&#123;transform:scale(1.1);&#125; 50%,70%&#123;transform:scale(1.1);&#125;&#125;#animate &#123; animation: heartAnimate 1.33s ease-in-out infinite;&#125;.with-love &#123; color: rgb(255, 113, 168);&#125; #animate 取自 第二小点的id 增加底部访客统计功能123456. ├── source ├── themes #主题 | ├── next #主题名 | ├── layout | ├── _partials 在_partials目录下找到footer.swig文件，在文件最上面加上 &lt;script async src=&quot;https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt; 在powered-by前加上 1234567891011&lt;div class=&quot;powered-by&quot;&gt;&lt;i class=&quot;fa fa-smile-o&quot;&gt;&lt;/i&gt;&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt; 欢迎光临，您是第 &lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt; 位访客&lt;/span&gt;&lt;/div&gt;&lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;&lt;div class=&quot;powered-by&quot;&gt;&lt;i class=&quot;fa fa-hand-o-right&quot;&gt;&lt;/i&gt;&lt;span id=&quot;busuanzi_container_site_pv&quot;&gt; 本站总访问量 &lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt; 次&lt;/span&gt;&lt;/div&gt; 效果图 添加文章版权声明 在目录 123456. ├── source ├── themes #主题 | ├── next #主题名 | ├── layout | ├── _macro 下新增文件my-copyright.swig 123456789101112131415161718192021222324252627282930313233&#123;% if page.copyright %&#125;&lt;div class=&quot;my_post_copyright&quot;&gt; &lt;script src=&quot;//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js&quot;&gt;&lt;/script&gt; &lt;!-- JS库 sweetalert 可修改路径 --&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;http://jslibs.wuxubj.cn/sweetalert_mini/jquery-1.7.1.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;http://jslibs.wuxubj.cn/sweetalert_mini/sweetalert.min.js&quot;&gt;&lt;/script&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://jslibs.wuxubj.cn/sweetalert_mini/sweetalert.mini.css&quot;&gt; &lt;p&gt;&lt;span&gt;本文标题:&lt;/span&gt;&#123;&#123; page.title &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;文章作者:&lt;/span&gt;&#123;&#123; theme.author &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;发布时间:&lt;/span&gt;&#123;&#123; page.date.format(&quot;YYYY年MM月DD日 - HH:mm:ss&quot;) &#125;&#125;&lt;/p&gt; &lt;p&gt;&lt;span&gt;最后更新:&lt;/span&gt;&#123;&#123; page.updated.format(&quot;YYYY年MM月DD日 - HH:mm:ss&quot;) &#125;&#125;&lt;/p&gt; &lt;p&gt;&lt;span&gt;原始链接:&lt;/span&gt;&lt;a href=&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot; title=&quot;&#123;&#123; page.title &#125;&#125;&quot;&gt;&#123;&#123; page.permalink &#125;&#125;&lt;/a&gt; &lt;span class=&quot;copy-path&quot; title=&quot;点击复制文章链接&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; data-clipboard-text=&quot;&#123;&#123; page.permalink &#125;&#125;&quot; aria-label=&quot;复制成功！&quot;&gt;&lt;/i&gt;&lt;/span&gt; &lt;/p&gt; &lt;p&gt;&lt;span&gt;许可协议:&lt;/span&gt;&lt;i class=&quot;fa fa-creative-commons&quot;&gt;&lt;/i&gt; &lt;a rel=&quot;license&quot; href=&quot;https://creativecommons.org/licenses/by-nc-nd/4.0/&quot; target=&quot;_blank&quot; title=&quot;Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)&quot;&gt;署名-非商业性使用-禁止演绎 4.0 国际&lt;/a&gt; 转载请保留原文链接及作者。&lt;/p&gt; &lt;/div&gt;&lt;script&gt; var clipboard = new Clipboard(&apos;.fa-clipboard&apos;); clipboard.on(&apos;success&apos;, $(function()&#123; $(&quot;.fa-clipboard&quot;).click(function()&#123; swal(&#123; title: &quot;&quot;, text: &apos;复制成功&apos;, html: false, timer: 500, showConfirmButton: false &#125;); &#125;); &#125;)); &lt;/script&gt;&#123;% endif %&#125; 在目录 123456789. ├── source ├── themes #主题 | ├── next #主题名 | ├── source | ├── css | ├── _common | ├── components | ├── post 新增文件my-post-copyright.styl 123456789101112131415161718192021222324252627282930313233343536373839404142434445.my_post_copyright &#123; width: 85%; max-width: 45em; margin: 2.8em auto 0; padding: 0.5em 1.0em; border: 1px solid #d3d3d3; font-size: 0.93rem; line-height: 1.6em; word-break: break-all; background: rgba(255,255,255,0.4);&#125;.my_post_copyright p&#123;margin:0;&#125;.my_post_copyright span &#123; display: inline-block; width: 5.2em; color: #333333; // title color font-weight: bold;&#125;.my_post_copyright .raw &#123; margin-left: 1em; width: 5em;&#125;.my_post_copyright a &#123; color: #808080; border-bottom:0;&#125;.my_post_copyright a:hover &#123; color: #0593d3; // link color text-decoration: underline;&#125;.my_post_copyright:hover .fa-clipboard &#123; color: #000;&#125;.my_post_copyright .post-url:hover &#123; font-weight: normal;&#125;.my_post_copyright .copy-path &#123; margin-left: 1em; width: 1em; +mobile()&#123;display:none;&#125;&#125;.my_post_copyright .copy-path:hover &#123; color: #808080; cursor: pointer;&#125; 修改 123456. ├── source ├── themes #主题 | ├── next #主题名 | ├── layout | ├── _macro 下的post.swig ，end post body后添加 12345678 &#123;#####################&#125; &#123;### END POST BODY ###&#125; &#123;#####################&#125;&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include &apos;my-copyright.swig&apos; %&#125; &#123;% endif %&#125;&lt;/div&gt; 在 123456789. ├── source ├── themes #主题 | ├── next #主题名 | ├── source | ├── css | ├── _common | ├── components | ├── post 里的post.styl 文件尾添加 1@import &quot;my-post-copyright&quot; 我一般新建文章是在 123. ├── source ├── _posts 下的.md文件直接添加版权声明开启，栗子 123456789---title: 我是一个栗子date: 2018-11-10 10:18:13categories:- 栗子tags:- hexocopyright: true #新增,开启--- 修改标签图标 目录 123456. ├── source ├── themes #主题 | ├── next #主题名 | ├── layout | ├── _macro 把post.swig 中的 rel=”tag”&gt;# 的#替换成 ，图标可以上文章前面的网址找，替换完后要重启server 文章末尾添加文章结束提示 目录 123456. ├── source ├── themes #主题 | ├── next #主题名 | ├── layout | ├── _macro 新建passage-end-tag.swig 文件 ，内容 12345&lt;div&gt; &#123;% if not is_index %&#125; &lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;-------------&lt;i class=&quot;fa fa-pencil&quot;&gt;&lt;/i&gt; this is end, thank you for reading &lt;i class=&quot;fa fa-pencil&quot;&gt;&lt;/i&gt;-------------&lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt; 修改同目录下post.swig文件 ，放在end post body后面，我这边放在版权声明后面 12345678910111213&#123;#####################&#125; &#123;### END POST BODY ###&#125; &#123;#####################&#125;&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include &apos;my-copyright.swig&apos; %&#125; &#123;% endif %&#125;&lt;/div&gt;&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include &apos;passage-end-tag.swig&apos; %&#125; &#123;% endif %&#125; &lt;/div&gt; 效果图 鼠标点击出现爱心效果 目录 1234567. ├── source ├── themes #主题 | ├── next #主题名 | ├── source | ├── js | ├── src 新建love.js，内容 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566(function(window,document,undefined)&#123;var hearts = [];window.requestAnimationFrame = (function()&#123;return window.requestAnimationFrame ||window.webkitRequestAnimationFrame ||window.mozRequestAnimationFrame ||window.oRequestAnimationFrame ||window.msRequestAnimationFrame ||function (callback)&#123;setTimeout(callback,1000/60);&#125;&#125;)();init();function init()&#123;css(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &apos;&apos;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: absolute;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;);attachEvent();gameloop();&#125;function gameloop()&#123;for(var i=0;i&lt;hearts.length;i++)&#123;if(hearts[i].alpha &lt;=0)&#123;document.body.removeChild(hearts[i].el);hearts.splice(i,1);continue;&#125;hearts[i].y--;hearts[i].scale += 0.004;hearts[i].alpha -= 0.013;hearts[i].el.style.cssText = &quot;left:&quot;+hearts[i].x+&quot;px;top:&quot;+hearts[i].y+&quot;px;opacity:&quot;+hearts[i].alpha+&quot;;transform:scale(&quot;+hearts[i].scale+&quot;,&quot;+hearts[i].scale+&quot;) rotate(45deg);background:&quot;+hearts[i].color;&#125;requestAnimationFrame(gameloop);&#125;function attachEvent()&#123;var old = typeof window.onclick===&quot;function&quot; &amp;&amp; window.onclick;window.onclick = function(event)&#123;old &amp;&amp; old();createHeart(event);&#125;&#125;function createHeart(event)&#123;var d = document.createElement(&quot;div&quot;);d.className = &quot;heart&quot;;hearts.push(&#123;el : d,x : event.clientX - 5,y : event.clientY - 5,scale : 1,alpha : 1,color : randomColor()&#125;);document.body.appendChild(d);&#125;function css(css)&#123;var style = document.createElement(&quot;style&quot;);style.type=&quot;text/css&quot;;try&#123;style.appendChild(document.createTextNode(css));&#125;catch(ex)&#123;style.styleSheet.cssText = css;&#125;document.getElementsByTagName(&apos;head&apos;)[0].appendChild(style);&#125;function randomColor()&#123;return &quot;rgb(&quot;+(~~(Math.random()*255))+&quot;,&quot;+(~~(Math.random()*255))+&quot;,&quot;+(~~(Math.random()*255))+&quot;)&quot;;&#125;&#125;)(window,document); 目录 12345. ├── source ├── themes #主题 | ├── next #主题名 | ├── layout _layout.swig文件末尾添加一下 12&lt;!-- 页面点击小红心 --&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/love.js&quot;&gt;&lt;/script&gt; 为blog设置一只小可爱 git bash键入 npm install -save hexo-helper-live2d 去github地址 https://github.com/xiazeyu/live2d-widget-models 选择自己想要的model，比如我选了个黑猫model live2d-widget-model-hijiki，需要 npm install --save live2d-widget-model-hijiki 安装模块 随后在站点配置文件里加入 12345678910111213141516live2d: enable: true scriptFrom: local pluginRootPath: live2dw/ pluginJsPath: lib/ pluginModelPath: assets/ tagMode: false debug: false model: use: live2d-widget-model-hijiki display: position: right width: 100 height: 100 mobile: show: true 设置网站图标 在网址 https://www.easyicon.net/找一张（32*32）的ico图标 把图标放在 123456. ├── source ├── themes #主题 | ├── next #主题名 | ├── source | ├── images 修改主题配置文件 12345favicon: small: /images/favicon-16x16-next.png medium: /images/你下载的图标.ico apple_touch_icon: /images/apple-touch-icon-next.png safari_pinned_tab: /images/logo.svg 设置背景图片目录 1234567. ├── source ├── themes #主题 | ├── next #主题名 | ├── source | ├── css | ├── _custom 下 custom.styl 文件 新增这些，这个配置可以保证图片全屏显示，有的文章的配置会有显示不全屏的情况 12345678910111213@media screen and (min-width:1200px) &#123; body &#123; background-image:url(/images/background.jpg); background-repeat: no-repeat; background-attachment:fixed; background-position:50% 50%; &#125; #footer a &#123; color:#eee; &#125;&#125; 设置可交互背景 进入 theme/next 执行命令 git clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest 下载动态js文件 配置主题配置文件canvas_nest 为true 添加github图标链接 链接图标选择地址 http://tholman.com/github-corners/ 把代码复制到目录 12345. ├── source ├── themes #主题 | ├── next #主题名 | ├── layout 下的_layout.swig 文件中的 &lt;div class=&quot;headband&quot;&gt;&lt;/div&gt; 下面，并把href指向修改为你的github地址 设置圆形动态头像 设置头像前面已经说过了 接下在目录 123456789. ├── source ├── themes #主题 | ├── next #主题名 | ├── source | ├── css | ├── _common | ├── components | ├── sidebar 下的sidebar-author.styl 新增 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354.site-author-image &#123; display: block; margin: 0 auto; padding: $site-author-image-padding; max-width: $site-author-image-width; height: $site-author-image-height; border: $site-author-image-border-width solid $site-author-image-border-color; /* 头像圆形 */ border-radius: 80px; -webkit-border-radius: 80px; -moz-border-radius: 80px; box-shadow: inset 0 -1px 0 #333sf; /* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束 (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*/ /* 鼠标经过头像旋转360度 */ -webkit-transition: -webkit-transform 1.0s ease-out; -moz-transition: -moz-transform 1.0s ease-out; transition: transform 1.0s ease-out;&#125;img:hover &#123; /* 鼠标经过停止头像旋转 -webkit-animation-play-state:paused; animation-play-state:paused;*/ /* 鼠标经过头像旋转360度 */ -webkit-transform: rotateZ(360deg); -moz-transform: rotateZ(360deg); transform: rotateZ(360deg);&#125;/* Z 轴旋转动画 */@-webkit-keyframes play &#123; 0% &#123; -webkit-transform: rotateZ(0deg); &#125; 100% &#123; -webkit-transform: rotateZ(-360deg); &#125;&#125;@-moz-keyframes play &#123; 0% &#123; -moz-transform: rotateZ(0deg); &#125; 100% &#123; -moz-transform: rotateZ(-360deg); &#125;&#125;@keyframes play &#123; 0% &#123; transform: rotateZ(0deg); &#125; 100% &#123; transform: rotateZ(-360deg); &#125;&#125; 设置代码块样式 目录 1234567. ├── source ├── themes #主题 | ├── next #主题名 | ├── source | ├── css | ├── _custom 下文件custom.styl 新增 123456789101112131415//代码块` `样式code &#123; color: #ff7600; background: #fbf7f8; margin: 2px;&#125;// 大代码块的自定义样式.highlight, pre &#123; margin: 5px 0; padding: 5px; border-radius: 3px;&#125;.highlight, code, pre &#123; border: 1px solid #d6d6d6;&#125; 测试，我是一行快乐的代码块 网页底部添加blog运行时长 目录 123456. ├── source ├── themes #主题 | ├── next #主题名 | ├── layout | ├── _partials 下footer.swig文件头部添加 1234567891011121314151617181920212223242526&lt;div id=&quot;days&quot;&gt;&lt;/div&gt;&lt;script&gt;function show_date_time()&#123;window.setTimeout(&quot;show_date_time()&quot;, 1000);BirthDay=new Date(&quot;05/27/2017 15:13:14&quot;);today=new Date();timeold=(today.getTime()-BirthDay.getTime());sectimeold=timeold/1000secondsold=Math.floor(sectimeold);msPerDay=24*60*60*1000e_daysold=timeold/msPerDaydaysold=Math.floor(e_daysold);e_hrsold=(e_daysold-daysold)*24;hrsold=setzero(Math.floor(e_hrsold));e_minsold=(e_hrsold-hrsold)*60;minsold=setzero(Math.floor((e_hrsold-hrsold)*60));seconds=setzero(Math.floor((e_minsold-minsold)*60));document.getElementById(&apos;days&apos;).innerHTML=&quot;已运行&quot;+daysold+&quot;天&quot;+hrsold+&quot;小时&quot;+minsold+&quot;分&quot;+seconds+&quot;秒&quot;;&#125;function setzero(i)&#123;if (i&lt;10)&#123;i=&quot;0&quot; + i&#125;;return i;&#125;show_date_time();&lt;/script&gt; 接下来我是在原本的访客记录位置下添加 &lt;div id=&quot;days&quot;&gt;&lt;/div&gt; 添加文章图片点击放大功能 目录 1234567. ├── source ├── themes #主题 | ├── next #主题名 | ├── source | ├── js | ├── src 中文件post-details.js最后面添加 123456789101112131415161718192021222324252627//----点击 图片放大js----------------function createImgEventFullScreen() &#123; var imgs = $(&quot;.post-body&quot;).find(&quot;img&quot;); console.log(imgs); for(var i = 0;i &lt; imgs.length;i++) &#123; // $(imgs[i]).click(createCover(imgs[i])); imgs[i].onclick= function(e) &#123; var src = e.srcElement.currentSrc; createCover(src) &#125; &#125; function createCover (src) &#123; console.log(src); var cover = $(&quot;&lt;div id=&apos;fullScreenCover&apos; class=&apos;zhou-cover-img-container&apos;&gt;&lt;img class=&apos;zhou-cover-img&apos; src=&apos;&quot;+src+&quot;&apos;/&gt;&lt;/div&gt;&quot;); $(&quot;#fullScreenCover&quot;).remove(); $(&quot;body&quot;).append(cover); $(&quot;body&quot;).addClass(&quot;zhou-no-scroll&quot;); $(&quot;#fullScreenCover&quot;).click(function()&#123; $(&quot;#fullScreenCover&quot;).remove(); $(&quot;body&quot;).removeClass(&quot;zhou-no-scroll&quot;); &#125;) &#125;&#125;setTimeout(function()&#123; createImgEventFullScreen();&#125;,1000) 目录 1234567. ├── source ├── themes #主题 | ├── next #主题名 | ├── source | ├── css | ├── _custom 中文件custom.styl最后添加 1234567891011121314151617181920.zhou-cover-img-container&#123; position: fixed; top: 10%; left: 10%; width: 80%; height: 80%; z-index: 10002; text-align: center; background-color: #000;&#125;.zhou-cover-img&#123; left: 0; height: 100%; width: 100%; position: absolute; top: 0; bottom: 0;&#125; 目录 12345. ├── source ├── node_modules | ├── hexo-blog-encrypt | ├── lib 中修改blog-encrypt.js ，在 $(&#39;#encrypt-blog&#39;).html(content); 后面加上 createImgEventFullScreen(); ….blog美化先到这里吧，感觉有点被榨干了，虽然说还有些高阶优化，后面再补充吧，以上。效果图 更多效果请移步，blog：https://qq1028951741.github.io/ 人生两苦：想要却不得，拥有却失去。 –褚禄山 珍惜当下,与君共勉~]]></content>
      <categories>
        <category>hexo-blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何快速利用hexo搭建blog？]]></title>
    <url>%2F2018%2F11%2F10%2Fhexo1%2F</url>
    <content type="text"><![CDATA[如何快速利用hexo搭建blog？安装需要的工具 安装nodejs，最新版本自带npm，然后cmd，查看node -v，若有相应版本，则安装成功。 npm默认的源的下载速度可能很慢，建议使用淘宝镜像替换。 npm config set registry &quot;https://registry.npm.taobao.org&quot; 安装git 安装hexo 新建hexo文件夹 空白处右键git bash here 键入npm install hexo -g #-g表示全局安装, npm默认为当前项目安装 查看hexo version，有相应信息，则安装成功 让hexo跑起来~ 在hexo文件夹右键git bash here 执行hexo init，执行完生成如下目录结构 1234567891011.├── .deploy #需要部署的文件├── node_modules #Hexo插件├── public #生成的静态网页文件├── scaffolds #模板├── source #博客正文和其他源文件, 404 favicon CNAME 等都应该放在这里| ├── _drafts #草稿| └── _posts #文章├── themes #主题├── _config.yml #全局配置文件└── package.json 执行npm install安装hexo所需模块 执行hexo generate生成静态文件 执行hexo s本地部署 访问http://localhost:4000/ Congratulations~~~ 人生两苦：想要却不得，拥有却失去。 –褚禄山 珍惜当下,与君共勉~]]></content>
      <categories>
        <category>hexo-blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
