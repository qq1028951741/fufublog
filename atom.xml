<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>燃情岁月</title>
  
  <subtitle>嘿嘿嘿</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://qq1028951741.github.io/"/>
  <updated>2019-04-02T01:06:07.305Z</updated>
  <id>https://qq1028951741.github.io/</id>
  
  <author>
    <name>fufua</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Could not find acceptable representation原因及解决方法</title>
    <link href="https://qq1028951741.github.io/2019/03/20/Could%20not%20find%20acceptable%20representation%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://qq1028951741.github.io/2019/03/20/Could not find acceptable representation原因及解决方法/</id>
    <published>2019-03-20T07:40:13.000Z</published>
    <updated>2019-04-02T01:06:07.305Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""></the></excerpt></p><h2 id="Could-not-find-acceptable-representation原因及解决方法"><a href="#Could-not-find-acceptable-representation原因及解决方法" class="headerlink" title="Could not find acceptable representation原因及解决方法"></a>Could not find acceptable representation原因及解决方法</h2><p>HttpMediaTypeNotAcceptableException: Could not find acceptable representation<br>错误原因:请求contenttype=application/json;charset=UTF-8,而这里的produces=text/html<br>原来代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value = &quot;/upload&quot;, method = RequestMethod.POST, produces = &quot;text/html; charset=UTF-8&quot;)</span><br></pre></td></tr></table></figure></p><p>解决方法：去掉 produces = “text/html; charset=UTF-8”这段代码或者设置produces=application/json;charset=UTF-8</p><hr><blockquote class="blockquote-center"><p>人生两苦：想要却不得，拥有却失去。  –褚禄山<br>            珍惜当下,与君共勉~</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;
    
    </summary>
    
      <category term="开发日常记录" scheme="https://qq1028951741.github.io/categories/%E5%BC%80%E5%8F%91%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="error" scheme="https://qq1028951741.github.io/tags/error/"/>
    
  </entry>
  
  <entry>
    <title>全功能的终端软件MobaXterm</title>
    <link href="https://qq1028951741.github.io/2019/03/20/%E5%85%A8%E5%8A%9F%E8%83%BD%E7%9A%84%E7%BB%88%E7%AB%AF%E8%BD%AF%E4%BB%B6MobaXterm/"/>
    <id>https://qq1028951741.github.io/2019/03/20/全功能的终端软件MobaXterm/</id>
    <published>2019-03-20T07:40:13.000Z</published>
    <updated>2019-04-02T01:02:56.224Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""></the></excerpt></p><h2 id="全功能的终端软件MobaXterm"><a href="#全功能的终端软件MobaXterm" class="headerlink" title="全功能的终端软件MobaXterm"></a>全功能的终端软件MobaXterm</h2><p>在以前的资料里，串口和SSH远程登使用SecureCRT，window与ubuntu数据传输使用filezilla，窗口切换来切换去，麻烦也眼花缭乱。有没有一个工具搞定串口、SSH和FTP？有！它就是MobaXterm。是不是特别高效呢？</p><p>MobaXterm是一个全功能的终端软件。除了支持SSH连接还能支持FTP、串口等协议。</p><p>其拥有以下特性：</p><p>l  内建多标签和多终端分屏</p><p>l  内建SFTP文件传输</p><p>l  内建X server，可远程运行X窗口程序</p><p>l  直接支持VNC/RDP/Xdmcp等远程桌面</p><p>l  默认的UTF-8编码</p><p>l  更加友好的串口连接设置</p><p>MobaXterm分免费开源版和收费专业版。官网提供MobaXterm的免费开源版“Home Edition”下载, 免费开源版又分便捷版(解压即用)和安装版(需要一步步安装)。我们使用免费开源版的便携版为例。(<a href="http://mobaxterm.mobatek.net/download-home-edition.html),下载位置。" target="_blank" rel="noopener">http://mobaxterm.mobatek.net/download-home-edition.html),下载位置。</a></p><p><img src="/images/mobaxterm1.png" alt="&quot;图片描述&quot;"></p><p>下载后解压文件，运行MobaXterm_Personal_10.2.exe即可。</p><h3 id="新建SSH连接"><a href="#新建SSH连接" class="headerlink" title="新建SSH连接"></a>新建SSH连接</h3><ul><li>打开软件后，点击左上角的Session（会话控制），在弹出的窗口中选择SSH</li></ul><p><img src="/images/mobaxterm2.png" alt="&quot;图片描述&quot;"><br><img src="/images/mobaxterm3.png" alt="&quot;图片描述&quot;"></p><ul><li>在弹出操作框里，输入主机IP和端口号（默认22），然后点击“OK”</li><li><p><img src="/images/mobaxterm4.png" alt="&quot;图片描述&quot;"></p></li><li><p>在新的窗口输入账号和密码，即可登陆主机。此时界面主要分两块，左边的是主机的文件，右边是终端。勾选左下角的“Follow terminal folder”可以让两个的工作路径保持一致</p></li></ul><p><img src="/images/mobaxterm5.png" alt="&quot;图片描述&quot;"></p><h3 id="新建FTP连接"><a href="#新建FTP连接" class="headerlink" title="新建FTP连接"></a>新建FTP连接</h3><p>MobaXterm支持FTP和SFTP连接。FTP安全性没有SFTP好，但速度比SFTP快，可根据自己需求选择适当的协议。</p><ul><li>在建立了SSH后，工作窗口默认就有SFTP传输窗口，可以直接拖拽互传文件。也可新建单独的窗口传输。这里以新建FTP为例。点击左上角的Session（会话控制），在弹出的窗口中选择FTP</li></ul><p><img src="/images/mobaxterm6.png" alt="&quot;图片描述&quot;"><br><img src="/images/mobaxterm7.png" alt="&quot;图片描述&quot;"></p><ul><li>在弹出操作框里，输入主机IP、用户名、端口号（默认21），然后点击“OK”</li></ul><p><img src="/images/mobaxterm8.png" alt="&quot;图片描述&quot;"></p><p>并输入密码。</p><p><img src="/images/mobaxterm9.png" alt="&quot;图片描述&quot;"></p><p>最后便可以进行Linux主机和Windows之间互传文件。</p><p><img src="/images/mobaxterm10.png" alt="&quot;图片描述&quot;"></p><h3 id="新建串口连接"><a href="#新建串口连接" class="headerlink" title="新建串口连接"></a>新建串口连接</h3><ul><li>点击左上角的Session（会话控制），在弹出的窗口中选择Serial</li></ul><p><img src="/images/mobaxterm11.png" alt="&quot;图片描述&quot;"><br><img src="/images/mobaxterm12.png" alt="&quot;图片描述&quot;"></p><ul><li>在弹出操作框里，在左边的Serial prot选择当前的COM口，如果没有自动识别出来，暂时不管。在右边的Speed里选择适当的波特率，然后点击“OK”</li></ul><p><img src="/images/mobaxterm13.png" alt="&quot;图片描述&quot;"></p><ul><li>此时选择对应的COM口。如果没有，请检查连线和重启软件。</li></ul><p><img src="/images/mobaxterm14.png" alt="&quot;图片描述&quot;"></p><ul><li>最后便可进行串口操作<br><img src="/images/mobaxterm15.png" alt="&quot;图片描述&quot;"></li></ul><p>总结：别看上面步骤有点多，其实MobaXterm的使用非常简单，无非是新建会话并选择相关协议按提示一步步操作，MobaXterm很好用，我们墙裂推荐，快去试试吧。</p><hr><blockquote class="blockquote-center"><p>人生两苦：想要却不得，拥有却失去。  –褚禄山<br>            珍惜当下,与君共勉~</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;
    
    </summary>
    
      <category term="开发日常记录" scheme="https://qq1028951741.github.io/categories/%E5%BC%80%E5%8F%91%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="终端软件" scheme="https://qq1028951741.github.io/tags/%E7%BB%88%E7%AB%AF%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>异步执行</title>
    <link href="https://qq1028951741.github.io/2019/03/20/%E5%BC%82%E6%AD%A5%E6%89%A7%E8%A1%8C/"/>
    <id>https://qq1028951741.github.io/2019/03/20/异步执行/</id>
    <published>2019-03-20T07:40:13.000Z</published>
    <updated>2019-04-01T11:37:44.735Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""></the></excerpt></p><h2 id="异步执行"><a href="#异步执行" class="headerlink" title="异步执行"></a>异步执行</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ExecutorService executor = Executors.newFixedThreadPool(10);</span><br><span class="line">//这里用异步来保存文件，保存文件可能花较多时间</span><br><span class="line"></span><br><span class="line">executor.submit(new Runnable() &#123;</span><br><span class="line">            </span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                fileFeignClient.saveFile(file, path, fileName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><hr><blockquote class="blockquote-center"><p>人生两苦：想要却不得，拥有却失去。  –褚禄山<br>            珍惜当下,与君共勉~</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;
    
    </summary>
    
      <category term="开发日常记录" scheme="https://qq1028951741.github.io/categories/%E5%BC%80%E5%8F%91%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="异步" scheme="https://qq1028951741.github.io/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>bean 与 String 相互转换</title>
    <link href="https://qq1028951741.github.io/2019/03/20/bean%20%E4%B8%8E%20String%20%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/"/>
    <id>https://qq1028951741.github.io/2019/03/20/bean 与 String 相互转换/</id>
    <published>2019-03-20T07:40:13.000Z</published>
    <updated>2019-04-01T08:42:23.273Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""></the></excerpt></p><h2 id="bean-与-String-相互转换"><a href="#bean-与-String-相互转换" class="headerlink" title="bean 与 String 相互转换"></a>bean 与 String 相互转换</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 将任意类型转换成字符串</span><br><span class="line">     * @param value</span><br><span class="line">     * @param &lt;T&gt;</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static &lt;T&gt; String beanToString(T value) &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = value.getClass();</span><br><span class="line">        if(clazz == int.class || clazz == Integer.class) &#123;</span><br><span class="line">            return value + &quot;&quot;;</span><br><span class="line">        &#125;else if(clazz == String.class) &#123;</span><br><span class="line">            return (String)value;</span><br><span class="line">        &#125;else if(clazz == long.class || clazz == Long.class) &#123;</span><br><span class="line">            return value + &quot;&quot;;</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            return JSON.toJSONString(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 把一个字符串转换成bean对象</span><br><span class="line">    * @param str</span><br><span class="line">    * @param &lt;T&gt;</span><br><span class="line">    * @return</span><br><span class="line">    */</span><br><span class="line">   public static &lt;T&gt; T stringToBean(String str, Class&lt;T&gt; clazz) &#123;</span><br><span class="line">       if(str == null || str.length() &lt;= 0 || clazz == null) &#123;</span><br><span class="line">           return null;</span><br><span class="line">       &#125;</span><br><span class="line">       if(clazz == int.class || clazz == Integer.class) &#123;</span><br><span class="line">           return (T)Integer.valueOf(str);</span><br><span class="line">       &#125;else if(clazz == String.class) &#123;</span><br><span class="line">           return (T)str;</span><br><span class="line">       &#125;else if(clazz == long.class || clazz == Long.class) &#123;</span><br><span class="line">           return  (T)Long.valueOf(str);</span><br><span class="line">       &#125;else &#123;</span><br><span class="line">           return JSON.toJavaObject(JSON.parseObject(str), clazz);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><hr><blockquote class="blockquote-center"><p>人生两苦：想要却不得，拥有却失去。  –褚禄山<br>            珍惜当下,与君共勉~</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;
    
    </summary>
    
      <category term="开发日常记录" scheme="https://qq1028951741.github.io/categories/%E5%BC%80%E5%8F%91%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="bean" scheme="https://qq1028951741.github.io/tags/bean/"/>
    
  </entry>
  
  <entry>
    <title>在Oracle中取得查询结果的前10条或第10条到第20条记录</title>
    <link href="https://qq1028951741.github.io/2019/03/13/%E5%9C%A8Oracle%E4%B8%AD%E5%8F%96%E5%BE%97%E6%9F%A5%E8%AF%A2%E7%BB%93%E6%9E%9C%E7%9A%84%E5%89%8D10%E6%9D%A1%E6%88%96%E7%AC%AC10%E6%9D%A1%E5%88%B0%E7%AC%AC20%E6%9D%A1%E8%AE%B0%E5%BD%95/"/>
    <id>https://qq1028951741.github.io/2019/03/13/在Oracle中取得查询结果的前10条或第10条到第20条记录/</id>
    <published>2019-03-13T02:54:13.000Z</published>
    <updated>2019-03-22T10:59:21.760Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""></the></excerpt></p><h2 id="在Oracle中取得查询结果的前10条或第10条到第20条记录"><a href="#在Oracle中取得查询结果的前10条或第10条到第20条记录" class="headerlink" title="在Oracle中取得查询结果的前10条或第10条到第20条记录"></a>在Oracle中取得查询结果的前10条或第10条到第20条记录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT m.* FROM member m  WHERE ROWNUM &lt;= 10 </span><br><span class="line">SELECT hpzl,hphm,yxqz  FROM (SELECT distinct hpzl,hphm,yxqz, ROWNUM rn FROM VEHICLE where ROWNUM &lt;= ?) WHERE rn &gt;= ?</span><br></pre></td></tr></table></figure><hr><blockquote class="blockquote-center"><p>人生两苦：想要却不得，拥有却失去。  –褚禄山<br>            珍惜当下,与君共勉~</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;
    
    </summary>
    
      <category term="开发日常记录" scheme="https://qq1028951741.github.io/categories/%E5%BC%80%E5%8F%91%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="oracle" scheme="https://qq1028951741.github.io/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title>Cron表达式</title>
    <link href="https://qq1028951741.github.io/2019/03/13/Cron%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://qq1028951741.github.io/2019/03/13/Cron表达式/</id>
    <published>2019-03-13T02:54:13.000Z</published>
    <updated>2019-03-22T09:03:05.477Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""></the></excerpt></p><h2 id="Cron表达式"><a href="#Cron表达式" class="headerlink" title="Cron表达式"></a>Cron表达式</h2><h3 id="CronTrigger"><a href="#CronTrigger" class="headerlink" title="CronTrigger"></a>CronTrigger</h3><p>CronTriggers往往比SimpleTrigger更有用，如果您需要基于日历的概念，而非SimpleTrigger完全指定的时间间隔，复发的发射工作的时间表。<br>CronTrigger，你可以指定触发的时间表如“每星期五中午”，或“每个工作日9:30时”，甚至“每5分钟一班9:00和10:00逢星期一上午，星期三星期五“。<br>即便如此，SimpleTrigger一样，CronTrigger拥有的startTime指定的时间表时生效，指定的时间表时，应停止（可选）结束时间。</p><h3 id="Cron-Expressions"><a href="#Cron-Expressions" class="headerlink" title="Cron Expressions"></a>Cron Expressions</h3><p>cron的表达式被用来配置CronTrigger实例。 cron的表达式是字符串，实际上是由七子表达式，描述个别细节的时间表。这些子表达式是分开的空白，代表：</p><ul><li>Seconds</li><li>Minutes</li><li>Hours</li><li>Day-of-Month</li><li>Month</li><li>Day-of-Week</li><li>Year (可选字段)<br>例  “0 0 12 ? * WED” 在每星期三下午12:00 执行,</li></ul><p>个别子表达式可以包含范围, 例如，在前面的例子里(“WED”)可以替换成 “MON-FRI”, “MON, WED, FRI”甚至”MON-WED,SAT”.</p><p>“*” 代表整个时间段.</p><p>每一个字段都有一套可以指定有效值，如</p><ul><li><p>Seconds (秒)         ：可以用数字0－59 表示，</p></li><li><p>Minutes(分)          ：可以用数字0－59 表示，</p></li><li><p>Hours(时)             ：可以用数字0-23表示,</p></li><li><p>Day-of-Month(天) ：可以用数字1-31 中的任一一个值，但要注意一些特别的月份</p></li><li><p>Month(月)            ：可以用0-11 或用字符串  “JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV and DEC” 表示</p></li><li><p>Day-of-Week(每周)：可以用数字1-7表示（1 ＝ 星期日）或用字符口串“SUN, MON, TUE, WED, THU, FRI and SAT”表示</p></li><li><p>“/”：为特别单位，表示为“每”如“0/15”表示每隔15分钟执行一次,“0”表示为从“0”分开始, “3/20”表示表示每隔20分钟执行一次，“3”表示从第3分钟开始执行</p></li><li><p>“?”：表示每月的某一天，或第周的某一天</p></li><li><p>“L”：用于每月，或每周，表示为每月的最后一天，或每个月的最后星期几如“6L”表示“每月的最后一个星期五”</p></li><li><p>“W”：表示为最近工作日，如“15W”放在每月（day-of-month）字段上表示为“到本月15日最近的工作日”</p></li><li><p>““#”：是用来指定“的”每月第n个工作日,例 在每周（day-of-week）这个字段中内容为”6#3” or “FRI#3” 则表示“每月第三个星期五”</p></li></ul><h3 id="Cron表达式的格式：秒-分-时-日-月-周-年-可选-。"><a href="#Cron表达式的格式：秒-分-时-日-月-周-年-可选-。" class="headerlink" title="Cron表达式的格式：秒 分 时 日 月 周 年(可选)。"></a>Cron表达式的格式：秒 分 时 日 月 周 年(可选)。</h3><p>字段名                 允许的值                        允许的特殊字符<br>秒                         0-59                               , - <em> /<br>分                         0-59                               , - </em> /<br>小时                     0-23                               , - <em> /<br>日                         1-31                               , - </em> ? / L W C<br>月                         1-12 or JAN-DEC         , - <em> /<br>周几                     1-7 or SUN-SAT           , - </em> ? / L C #<br>年 (可选字段)     empty, 1970-2099      , - * /</p><p>“?”字符：表示不确定的值</p><p>“,”字符：指定数个值</p><p>“-”字符：指定一个值的范围</p><p>“/”字符：指定一个值的增加幅度。n/m表示从n开始，每次增加m</p><p>“L”字符：用在日表示一个月中的最后一天，用在周表示该月最后一个星期X</p><p>“W”字符：指定离给定日期最近的工作日(周一到周五)</p><p>“#”字符：表示该月第几个周X。6#3表示该月第3个周五</p><h3 id="Cron表达式范例："><a href="#Cron表达式范例：" class="headerlink" title="Cron表达式范例："></a>Cron表达式范例：</h3><p>每隔5秒执行一次：0/5 <em> </em> <em> </em> ?</p><p>每隔1分钟执行一次：0 <em>/1 </em> <em> </em> ?</p><p>每天23点执行一次：0 0 23 <em> </em> ?</p><p>每天凌晨1点执行一次：0 0 1 <em> </em> ?</p><p>每月1号凌晨1点执行一次：0 0 1 1 * ?</p><p>每月最后一天23点执行一次：0 0 23 L * ?</p><p>每周星期天凌晨1点实行一次：0 0 1 ? * L</p><p>在26分、29分、33分执行一次：0 26,29,33 <em> </em> * ?</p><p>每天的0点、13点、18点、21点都执行一次：0 0 0,13,18,21 <em> </em> ?</p><hr><blockquote class="blockquote-center"><p>人生两苦：想要却不得，拥有却失去。  –褚禄山<br>            珍惜当下,与君共勉~</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;
    
    </summary>
    
      <category term="开发日常记录" scheme="https://qq1028951741.github.io/categories/%E5%BC%80%E5%8F%91%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="Cron" scheme="https://qq1028951741.github.io/tags/Cron/"/>
    
  </entry>
  
  <entry>
    <title>本地远程连接Oracle数据库</title>
    <link href="https://qq1028951741.github.io/2019/03/12/%E6%9C%AC%E5%9C%B0%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5Oracle%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://qq1028951741.github.io/2019/03/12/本地远程连接Oracle数据库/</id>
    <published>2019-03-12T02:54:13.000Z</published>
    <updated>2019-03-21T12:06:59.884Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""></the></excerpt></p><h2 id="本地远程连接Oracle数据库"><a href="#本地远程连接Oracle数据库" class="headerlink" title="本地远程连接Oracle数据库"></a>本地远程连接Oracle数据库</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>Oracle Client Package+PLSQL Developer </p><ul><li>从 <a href="http://www.oracle.com/technetwork/database/features/instant-client/index-097480.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/database/features/instant-client/index-097480.html</a> 下载对应Oracle数据库版本的Oracle Client Package放在D:\oracleclient，i9对应11系列<h3 id="tnsnames-ora数据库连接串配置"><a href="#tnsnames-ora数据库连接串配置" class="headerlink" title="tnsnames.ora数据库连接串配置"></a>tnsnames.ora数据库连接串配置</h3></li><li>新建并配置tnsnames.ora，修改其中的数据库连接串</li><li>配置如下:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">oracledata =</span><br><span class="line">(DESCRIPTION =</span><br><span class="line">(ADDRESS_LIST =</span><br><span class="line">(ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.0.58)(PORT = 1521))</span><br><span class="line">(CONNECT_DATA =</span><br><span class="line">(SERVICE_NAME = oracledata)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><ul><li>添加第一个环境变量，名为TNS_ADMIN，值为tnsnames.ora文件所在路径（如：D:\oraclient，特别是重装后或其它操作，忘了TNS_ADMIN变量，plsql登陆就会报无法解析指定的连接标识符)，这是为了能够找到上面说的tnsnames.ora。这步是最重要的。</li><li>添加第二个环境变量（可有可无）：“NLS_LANG = SIMPLIFIED CHINESE_CHINA.ZHS16GBK”，(AMERICAN_AMERICA.US7ASCII 是ASCII编码类型，其它类型可自己到服务器看一下或网上查找一下)（本步骤暂时要做对，如果编码不对，会产生乱码）。<h3 id="PL-SQL-Developer配置"><a href="#PL-SQL-Developer配置" class="headerlink" title="PL SQL Developer配置"></a>PL SQL Developer配置</h3></li><li>打开PL SQL Developer，登入界面点取消，进入后选择菜单栏 tools-&gt;preferences-&gt;connection ：<br>　　Oracle Home=D:\oracleclient<br>　　OCI library=D:\oracleclient\oci.dll<h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3>再次打开plsql则会在database中有oracledata 选项输入用户名密码就可以登陆。<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Initialization error </span><br><span class="line">Could not initialize &quot;C:\oracle\product\11.2.0\dbhome_1\bin\oci.dll&quot; </span><br><span class="line">Make sure you have the 32 bits Oracle Client installed. </span><br><span class="line">OCIDLL forced to C:\oracle\product\11.2.0\dbhome_1\bin\oci.dll </span><br><span class="line">LoadLibrary(C:\oracle\product\11.2.0\dbhome_1\bin\oci.dll) returned 0</span><br></pre></td></tr></table></figure></li></ul><p>这个往往是因为Oracle Client Package位数不对，根据提示下载相应位数包就可以了</p><hr><blockquote class="blockquote-center"><p>人生两苦：想要却不得，拥有却失去。  –褚禄山<br>            珍惜当下,与君共勉~</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;
    
    </summary>
    
      <category term="开发日常记录" scheme="https://qq1028951741.github.io/categories/%E5%BC%80%E5%8F%91%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="Oracle" scheme="https://qq1028951741.github.io/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot获取request</title>
    <link href="https://qq1028951741.github.io/2019/03/12/SpringBoot%E8%8E%B7%E5%8F%96request/"/>
    <id>https://qq1028951741.github.io/2019/03/12/SpringBoot获取request/</id>
    <published>2019-03-12T02:54:13.000Z</published>
    <updated>2019-03-20T00:46:10.411Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""></the></excerpt></p><h2 id="SpringBoot获取request"><a href="#SpringBoot获取request" class="headerlink" title="SpringBoot获取request"></a>SpringBoot获取request</h2><p>ServletRequestAttributes requestAttributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();<br>        HttpServletRequest request = requestAttributes.getRequest();</p><hr><blockquote class="blockquote-center"><p>人生两苦：想要却不得，拥有却失去。  –褚禄山<br>            珍惜当下,与君共勉~</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;
    
    </summary>
    
      <category term="开发日常记录" scheme="https://qq1028951741.github.io/categories/%E5%BC%80%E5%8F%91%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="SpringBoot" scheme="https://qq1028951741.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>一个运行jar的bat脚本</title>
    <link href="https://qq1028951741.github.io/2019/03/12/%E4%B8%80%E4%B8%AA%E8%BF%90%E8%A1%8Cjar%E7%9A%84bat%E8%84%9A%E6%9C%AC/"/>
    <id>https://qq1028951741.github.io/2019/03/12/一个运行jar的bat脚本/</id>
    <published>2019-03-12T02:54:13.000Z</published>
    <updated>2019-03-21T12:32:31.697Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""></the></excerpt></p><h2 id="一个运行jar的bat脚本"><a href="#一个运行jar的bat脚本" class="headerlink" title="一个运行jar的bat脚本"></a>一个运行jar的bat脚本</h2><ul><li>文件夹目录结构<br><img src="/images/一个运行jar的bat脚本.jpg" alt="&quot;图片描述&quot;"></li><li>bat脚本<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title &quot;**-car&quot; </span><br><span class="line">java -jar **-car.jar --DASPush=false --server.port=2025 &gt; log\**-car.log 2&gt;&amp;1 &amp;</span><br><span class="line">pause</span><br><span class="line">exit</span><br></pre></td></tr></table></figure></li></ul><hr><blockquote class="blockquote-center"><p>人生两苦：想要却不得，拥有却失去。  –褚禄山<br>            珍惜当下,与君共勉~</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;
    
    </summary>
    
      <category term="开发日常记录" scheme="https://qq1028951741.github.io/categories/%E5%BC%80%E5%8F%91%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="bat" scheme="https://qq1028951741.github.io/tags/bat/"/>
    
  </entry>
  
  <entry>
    <title>maven依赖本地jar</title>
    <link href="https://qq1028951741.github.io/2019/03/12/maven%E4%BE%9D%E8%B5%96%E6%9C%AC%E5%9C%B0jar/"/>
    <id>https://qq1028951741.github.io/2019/03/12/maven依赖本地jar/</id>
    <published>2019-03-12T02:54:13.000Z</published>
    <updated>2019-03-21T12:22:00.545Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""></the></excerpt></p><h2 id="maven依赖本地jar"><a href="#maven依赖本地jar" class="headerlink" title="maven依赖本地jar"></a>maven依赖本地jar</h2><p><img src="/images/maven依赖本地jar.jpg" alt="&quot;图片描述&quot;"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.oracle&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;ojdbc14&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;11.2.0.3&lt;/version&gt;</span><br><span class="line">&lt;scope&gt;system&lt;/scope&gt;</span><br><span class="line">&lt;systemPath&gt;$&#123;basedir&#125;/src/main/lib/ojdbc6-11.2.0.3.jar&lt;/systemPath&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><hr><blockquote class="blockquote-center"><p>人生两苦：想要却不得，拥有却失去。  –褚禄山<br>            珍惜当下,与君共勉~</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;
    
    </summary>
    
      <category term="开发日常记录" scheme="https://qq1028951741.github.io/categories/%E5%BC%80%E5%8F%91%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="maven" scheme="https://qq1028951741.github.io/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>Oracle创建用户、角色、授权、建表操作讲解</title>
    <link href="https://qq1028951741.github.io/2019/03/11/Oracle%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7%E3%80%81%E8%A7%92%E8%89%B2%E3%80%81%E6%8E%88%E6%9D%83%E3%80%81%E5%BB%BA%E8%A1%A8%E6%93%8D%E4%BD%9C%E8%AE%B2%E8%A7%A3/"/>
    <id>https://qq1028951741.github.io/2019/03/11/Oracle创建用户、角色、授权、建表操作讲解/</id>
    <published>2019-03-11T02:54:13.000Z</published>
    <updated>2019-03-18T03:39:26.405Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""></the></excerpt></p><h2 id="Oracle创建用户、角色、授权、建表操作讲解"><a href="#Oracle创建用户、角色、授权、建表操作讲解" class="headerlink" title="Oracle创建用户、角色、授权、建表操作讲解"></a>Oracle创建用户、角色、授权、建表操作讲解</h2><blockquote><p>oracle数据库的权限系统分为系统权限与对象权限。系统权限( database system privilege )可以让用户执行特定的命令集。例如，create table权限允许用户创建表，grant any privilege 权限允许用户授予任何系统权限。对象权限( database object privilege )可以让用户能够对各个对象进行某些操作。例如delete权限允许用户删除表或视图的行，select权限允许用户通过select从表、视图、序列(sequences)或快照(snapshots)中查询信息。每个oracle用户都有一个名字和口令,并拥有一些由其创建的表、视图和其他资源。oracle角色(role)就是一组权限(privilege)(或者是每个用户根据其状态和条件所需的访问类型)。用户可以给角色授予或赋予指定的权限，然后将角色赋给相应的用户。一个用户也可以直接给其他用户授权。</p></blockquote><h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><p>oracle内部有两个建好的用户：system和sys。用户可直接登录到system用户以创建其他用户，因为system具有创建别 的用户的 权限。 在安装oracle时，用户或系统管理员首先可以为自己建立一个用户。</p><ul><li>修改system用户密码方法：<br>  在SQL Plus中执行如下命令：<br>  SQL&gt;conn/as sysdba (操作系统认证登录)<br>  SQL&gt;alter user system identified by system; (回车后用户system的密码会更改为system)  </li></ul><p>语法[创建用户]： create user 用户名 identified by口令[即密码];</p><p>例子： create user c##fufu identified by oracle;</p><p>语法[更改用户]: alter user 用户名 identified by 口令[改变的口令];</p><p>例子： alter user test identified by 123456;</p><h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><p>语法：drop user 用户名;</p><p>例子：drop user test;</p><p>若用户拥有对象，则不能直接删除，否则将返回一个错误值。指定关键字cascade,可删除用户所有的对象，然后再删除用户。</p><p>语法： drop user 用户名 cascade;</p><p>例子： drop user test cascade;</p><h2 id="授权角色"><a href="#授权角色" class="headerlink" title="授权角色"></a>授权角色</h2><p>oracle为兼容以前版本，提供三种标准角色(role):connect/resource和dba.</p><p>(1)讲解三种标准角色：</p><p>1》. connect role(连接角色)</p><p>–临时用户，特指不需要建表的用户，通常只赋予他们connect role.</p><p>–connect是使用oracle简单权限，这种权限只对其他用户的表有访问权限，包括select/insert/update和delete等。</p><p>–拥有connect role 的用户还能够创建表、视图、序列(sequence)、簇(cluster)、同义词(synonym)、回话(session)和其他 数据的链(link)</p><p>2》. resource role(资源角色)</p><p>–更可靠和正式的数据库用户可以授予resource role。</p><p>–resource提供给用户另外的权限以创建他们自己的表、序列、过程(procedure)、触发器(trigger)、索引(index)和簇(cluster)。</p><p>3》. dba role(数据库管理员角色)</p><p>–dba role拥有所有的系统权限</p><p>–包括无限制的空间限额和给其他用户授予各种权限的能力。system由dba用户拥有</p><p>(2)授权命令</p><p>语法： grant connect, resource to 用户名;</p><p>例子： grant connect, resource to test;</p><p>(3)撤销权限</p><p>语法： revoke connect, resource from 用户名;</p><p>列子： revoke connect, resource from test;</p><h2 id="创建-授权-删除角色"><a href="#创建-授权-删除角色" class="headerlink" title="创建/授权/删除角色"></a>创建/授权/删除角色</h2><p>除了前面讲到的三种系统角色—-connect、resource和dba，用户还可以在oracle创建自己的role。用户创建的role可以由表或系统权限或两者的组合构成。为了创建role，用户必须具有create role系统权限。</p><p>1》创建角色</p><p>语法： create role 角色名;</p><p>例子： create role testRole;</p><p>2》授权角色</p><p>语法： grant select on class to 角色名;</p><p>列子： grant select on class totestRole;</p><p>注：现在，拥有testRole角色的所有用户都具有对class表的select查询权限</p><p>3》删除角色</p><p>语法： drop role 角色名;</p><p>例子： drop role testRole;</p><p>注：与testRole角色相关的权限将从数据库全部删除</p><h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><p>ORA-01950: 表空间’USERS’中无权限<br> ALTER USER “c##fufu” QUOTA UNLIMITED ON “USERS”;</p><hr><blockquote class="blockquote-center"><p>人生两苦：想要却不得，拥有却失去。  –褚禄山<br>            珍惜当下,与君共勉~</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;
    
    </summary>
    
      <category term="开发日常记录" scheme="https://qq1028951741.github.io/categories/%E5%BC%80%E5%8F%91%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="oracle" scheme="https://qq1028951741.github.io/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title>如何杀掉一个占用端口的进程</title>
    <link href="https://qq1028951741.github.io/2019/03/11/%E5%A6%82%E4%BD%95%E6%9D%80%E6%8E%89%E4%B8%80%E4%B8%AA%E5%8D%A0%E7%94%A8%E7%AB%AF%E5%8F%A3%E7%9A%84%E8%BF%9B%E7%A8%8B/"/>
    <id>https://qq1028951741.github.io/2019/03/11/如何杀掉一个占用端口的进程/</id>
    <published>2019-03-11T02:54:13.000Z</published>
    <updated>2019-03-19T00:36:22.197Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""></the></excerpt></p><h2 id="如何杀掉一个占用端口的进程"><a href="#如何杀掉一个占用端口的进程" class="headerlink" title="如何杀掉一个占用端口的进程"></a>如何杀掉一个占用端口的进程</h2><p><img src="/images/如何杀掉一个占用端口的进程.jpg" alt="&quot;图片描述&quot;"></p><hr><blockquote class="blockquote-center"><p>人生两苦：想要却不得，拥有却失去。  –褚禄山<br>            珍惜当下,与君共勉~</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;
    
    </summary>
    
      <category term="开发日常记录" scheme="https://qq1028951741.github.io/categories/%E5%BC%80%E5%8F%91%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="端口占用" scheme="https://qq1028951741.github.io/tags/%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Windows10开机自动运行批处理、脚本等的方法</title>
    <link href="https://qq1028951741.github.io/2019/03/10/Windows10%E5%BC%80%E6%9C%BA%E8%87%AA%E5%8A%A8%E8%BF%90%E8%A1%8C%E6%89%B9%E5%A4%84%E7%90%86%E3%80%81%E8%84%9A%E6%9C%AC%E7%AD%89%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://qq1028951741.github.io/2019/03/10/Windows10开机自动运行批处理、脚本等的方法/</id>
    <published>2019-03-10T02:54:13.000Z</published>
    <updated>2019-03-18T03:28:28.374Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""></the></excerpt></p><h2 id="Windows10开机自动运行批处理、脚本等的方法"><a href="#Windows10开机自动运行批处理、脚本等的方法" class="headerlink" title="Windows10开机自动运行批处理、脚本等的方法"></a>Windows10开机自动运行批处理、脚本等的方法</h2><ul><li>打开我的电脑， 在地址栏输入：“C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup”，</li><li>把自动运行批处理、脚本放到这个文件夹下。</li><li>重启系统。</li></ul><hr><blockquote class="blockquote-center"><p>人生两苦：想要却不得，拥有却失去。  –褚禄山<br>            珍惜当下,与君共勉~</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;
    
    </summary>
    
      <category term="开发日常记录" scheme="https://qq1028951741.github.io/categories/%E5%BC%80%E5%8F%91%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="bat" scheme="https://qq1028951741.github.io/tags/bat/"/>
    
  </entry>
  
  <entry>
    <title>Windows 下安装 Memcached及可视化</title>
    <link href="https://qq1028951741.github.io/2019/02/27/Windows%20%E4%B8%8B%E5%AE%89%E8%A3%85%20Memcached%E5%8F%8A%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    <id>https://qq1028951741.github.io/2019/02/27/Windows 下安装 Memcached及可视化/</id>
    <published>2019-02-27T02:54:13.000Z</published>
    <updated>2019-02-27T09:13:41.678Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""></the></excerpt></p><h2 id="Windows-下安装-Memcached及可视化"><a href="#Windows-下安装-Memcached及可视化" class="headerlink" title="Windows 下安装 Memcached及可视化"></a>Windows 下安装 Memcached及可视化</h2><h3 id="memcached版本下载"><a href="#memcached版本下载" class="headerlink" title="memcached版本下载"></a>memcached版本下载</h3><p>64位系统 1.4.5版本：<a href="http://static.runoob.com/download/memcached-1.4.5-amd64.zip" target="_blank" rel="noopener">http://static.runoob.com/download/memcached-1.4.5-amd64.zip</a></p><h3 id="memcached-gt-1-4-5-版本安装"><a href="#memcached-gt-1-4-5-版本安装" class="headerlink" title="memcached &gt;= 1.4.5 版本安装"></a>memcached &gt;= 1.4.5 版本安装</h3><ul><li>解压下载的安装包到指定目录。</li><li><p>在 memcached1.4.5 版本之后，memcached 不能作为服务来运行，需要使用任务计划中来开启一个普通的进程，在 window 启动时设置 memcached自动执行。我们使用管理员身份执行以下命令将 memcached 添加来任务计划表中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schtasks /create /sc onstart /tn memcached /tr &quot;&apos;c:\memcached\memcached.exe&apos; -m 512&quot;</span><br></pre></td></tr></table></figure><ul><li>你需要使用真实的路径替代 c:\memcached\memcached.exe。</li><li>-m 512 意思是设置 memcached 最大的缓存配置为512M。</li><li>我们可以通过使用 “c:\memcached\memcached.exe -h” 命令查看更多的参数配置。</li></ul></li><li><p>如果需要删除 memcached 的任务计划可以执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schtasks /delete /tn memcached</span><br></pre></td></tr></table></figure></li></ul><h3 id="memcached使用测试"><a href="#memcached使用测试" class="headerlink" title="memcached使用测试"></a>memcached使用测试</h3><ul><li>通过cmd，输入telnet 127.0.0.1 11211<ul><li>‘telnet’不是内部或外部命令，也不是可运行的程序或批处理文件<br>解决办法：控制面板|程序|程序和功能|打开和关闭Windows功能，勾选Telnet客户端。确定保存即可。 </li></ul></li><li>键入set、get进行测试<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">set foo 0 0 3   保存命令</span><br><span class="line">bar          数据</span><br><span class="line">STORED        结果</span><br><span class="line">get foo       取得命令</span><br><span class="line">VALUE foo 0 3   数据</span><br><span class="line">bar          数据</span><br><span class="line">END          结束行</span><br><span class="line">quit         退出</span><br></pre></td></tr></table></figure></li></ul><h3 id="memcached可视化"><a href="#memcached可视化" class="headerlink" title="memcached可视化"></a>memcached可视化</h3><ul><li>工具下载<br><code>http://www.treesoft.cn/dms.html</code> TreeSoft数据库管理系统 TreeNMS for Redis, memcached</li><li>将压缩文件解压.</li><li>双击 bin\startup.bat,运行Tomcat</li><li>打开浏览器，输入<a href="http://127.0.0.1:8086/treenms" target="_blank" rel="noopener">http://127.0.0.1:8086/treenms</a></li><li>默认用户名：treesoft，密码：treesoft ,用户:admin，密码：treesoft</li><li>登录后，点击右上角“参数配置”按钮，新增或修改连接参数，测试连接成功后，保存参数并刷新页面即可。<h3 id="可视化结果"><a href="#可视化结果" class="headerlink" title="可视化结果"></a>可视化结果</h3><img src="/images/memcached.jpg" alt="&quot;图片描述&quot;"></li></ul><hr><blockquote class="blockquote-center"><p>人生两苦：想要却不得，拥有却失去。  –褚禄山<br>            珍惜当下,与君共勉~</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;
    
    </summary>
    
      <category term="开发日常记录" scheme="https://qq1028951741.github.io/categories/%E5%BC%80%E5%8F%91%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="Memcached" scheme="https://qq1028951741.github.io/tags/Memcached/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud：服务间调用feign整合oauth鉴权</title>
    <link href="https://qq1028951741.github.io/2019/02/19/SpringCloud%EF%BC%9A%E6%9C%8D%E5%8A%A1%E9%97%B4%E8%B0%83%E7%94%A8Feign%E6%95%B4%E5%90%88oauth%E9%89%B4%E6%9D%83/"/>
    <id>https://qq1028951741.github.io/2019/02/19/SpringCloud：服务间调用Feign整合oauth鉴权/</id>
    <published>2019-02-19T02:54:13.000Z</published>
    <updated>2019-02-19T07:43:33.646Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""></the></excerpt></p><h2 id="SpringCloud：服务间调用Feign整合oauth鉴权"><a href="#SpringCloud：服务间调用Feign整合oauth鉴权" class="headerlink" title="SpringCloud：服务间调用Feign整合oauth鉴权"></a>SpringCloud：服务间调用Feign整合oauth鉴权</h2><blockquote><p>大体思路为把服务配置为资源服务器，feign调用时传递access_token参数，进行oauth鉴权。</p></blockquote><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p><img src="/images/feign-oauth1.jpg" alt="&quot;图片描述&quot;"></p><h3 id="zuul-service服务"><a href="#zuul-service服务" class="headerlink" title="zuul-service服务"></a>zuul-service服务</h3><p>增加两个过滤器，PreFilter和PostFilter。PreFilter作用http请求前，为设置参数转发和从cookie里取access_token并设置参数转发。PostFilter为http请求后，对返回内容进行统一封装。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">package com.fufu.filter;</span><br><span class="line"></span><br><span class="line">import com.netflix.zuul.ZuulFilter;</span><br><span class="line">import com.netflix.zuul.context.RequestContext;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.Cookie;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public class PreFilter extends ZuulFilter &#123;</span><br><span class="line"></span><br><span class="line">    private static Logger log = LoggerFactory.getLogger(PreFilter.class);</span><br><span class="line">    @Override</span><br><span class="line">    public String filterType() &#123;</span><br><span class="line">        return &quot;pre&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int filterOrder() &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean shouldFilter() &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Object run() &#123;</span><br><span class="line">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = ctx.getRequest();</span><br><span class="line">        log.info(String.format(&quot;%s &gt;&gt;&gt; %s&quot;, request.getMethod(), request.getRequestURL().toString()));</span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line"></span><br><span class="line">        if(request.getParameter(&quot;access_token&quot;) != null)&#123;</span><br><span class="line">            Map&lt;String, List&lt;String&gt;&gt; map1 = new HashMap&lt;String,List&lt;String&gt;&gt;();</span><br><span class="line">            List&lt;String&gt; list1 = new ArrayList&lt;String&gt;();</span><br><span class="line">            list1.add(request.getParameter(&quot;access_token&quot;));</span><br><span class="line">            map1.put(&quot;access_token&quot;,list1);</span><br><span class="line">            ctx.setRequestQueryParams(map1);</span><br><span class="line">        &#125;else if(cookies != null)&#123;</span><br><span class="line">            for(Cookie cookie:cookies) &#123;</span><br><span class="line">                if(cookie.getName().equals(&quot;Admin-Token&quot;)) &#123;</span><br><span class="line">                    Map&lt;String, List&lt;String&gt;&gt; map = new HashMap&lt;String,List&lt;String&gt;&gt;();</span><br><span class="line">                    List&lt;String&gt; list = new ArrayList&lt;String&gt;();</span><br><span class="line">                    list.add(cookie.getValue());</span><br><span class="line">                    map.put(&quot;access_token&quot;,list);</span><br><span class="line">                    ctx.setRequestQueryParams(map);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">package com.fufu.filter;</span><br><span class="line"></span><br><span class="line">import com.netflix.zuul.ZuulFilter;</span><br><span class="line">import com.netflix.zuul.context.RequestContext;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.ByteArrayOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public class PostFilter extends ZuulFilter &#123;</span><br><span class="line"></span><br><span class="line">private static Logger log = LoggerFactory.getLogger(ZuulFilter.class);</span><br><span class="line"></span><br><span class="line">public Object run() &#123;</span><br><span class="line">RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">HttpServletRequest request = ctx.getRequest();</span><br><span class="line">        HttpServletResponse response = ctx.getResponse();</span><br><span class="line">String requestURI = request.getRequestURI();</span><br><span class="line">        if(requestURI.contains(&quot;oauth/token&quot;))&#123;</span><br><span class="line">            String responJson = inputStreamConvertString(ctx.getResponseDataStream());</span><br><span class="line">            String responWrap = &quot;&#123;\&quot;ret\&quot;:1,\&quot;msg\&quot;:\&quot;获取access_token成功\&quot;,\&quot;data\&quot;:&quot;;</span><br><span class="line">            String responResult = responWrap+responJson+&quot;&#125;&quot;;</span><br><span class="line">            if(responJson.contains(&quot;error&quot;))&#123;</span><br><span class="line">                response.setStatus(400);</span><br><span class="line">                responWrap = &quot;&#123;\&quot;ret\&quot;:-1,\&quot;msg\&quot;:\&quot;访问失败\&quot;,\&quot;data\&quot;:&quot;;</span><br><span class="line">                responResult = responWrap+responJson+&quot;&#125;&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">            ctx.setResponseBody(responResult);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public boolean shouldFilter() &#123;</span><br><span class="line"></span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public int filterOrder() &#123;</span><br><span class="line"></span><br><span class="line">return 999;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String filterType() &#123;</span><br><span class="line"></span><br><span class="line">return &quot;post&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    public String inputStreamConvertString(InputStream inputStream) &#123;</span><br><span class="line">        String jsonStr = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            ByteArrayOutputStream result = new ByteArrayOutputStream();</span><br><span class="line">            byte[] buffer = new byte[1024];</span><br><span class="line">            int length;</span><br><span class="line">            while ((length = inputStream.read(buffer)) != -1) &#123;</span><br><span class="line">                result.write(buffer, 0, length);</span><br><span class="line">            &#125;</span><br><span class="line">            jsonStr = result.toString(StandardCharsets.UTF_8.name());</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return jsonStr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="common-module"><a href="#common-module" class="headerlink" title="common-module"></a>common-module</h3><p>在FeignConfig里新增apply方法，使得feign调用带上access_token参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package com.fufu.config;</span><br><span class="line"></span><br><span class="line">import feign.RequestInterceptor;</span><br><span class="line">import feign.RequestTemplate;</span><br><span class="line">import feign.codec.Encoder;</span><br><span class="line">import feign.form.spring.SpringFormEncoder;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.context.annotation.Primary;</span><br><span class="line">import org.springframework.context.annotation.Scope;</span><br><span class="line">import org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line">import org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">    public class FeignConfig implements RequestInterceptor &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    @Primary</span><br><span class="line">    @Scope(&quot;prototype&quot;)</span><br><span class="line">    public Encoder multipartFormEncoder() &#123;</span><br><span class="line">        return new SpringFormEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public feign.Logger.Level multipartLoggerLevel() &#123;</span><br><span class="line">        return feign.Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void apply(RequestTemplate paramRequestTemplate) &#123;</span><br><span class="line">        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">        HttpServletRequest request = attributes.getRequest();</span><br><span class="line">        //添加token</span><br><span class="line">        paramRequestTemplate.query(&quot;access_token&quot;, request.getParameter(&quot;access_token&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="file-service"><a href="#file-service" class="headerlink" title="file-service"></a>file-service</h3><p>file-service服务配置成资源服务器，具体参考 <code>SpringCloud：基于oauth2.0统一认证授权</code> 里的资源服务配置。</p><h3 id="business-service"><a href="#business-service" class="headerlink" title="business-service"></a>business-service</h3><p>利用原来的接口调用file-service服务的方法</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ul><li>测试流程：zuul-service –&gt; business-service –&gt; file-service</li><li><p>测试过程中会发现以下代码RequestContextHolder.getRequestAttributes()为空</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package com.fufu.config;</span><br><span class="line"></span><br><span class="line">import feign.RequestInterceptor;</span><br><span class="line">import feign.RequestTemplate;</span><br><span class="line">import feign.codec.Encoder;</span><br><span class="line">import feign.form.spring.SpringFormEncoder;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.context.annotation.Primary;</span><br><span class="line">import org.springframework.context.annotation.Scope;</span><br><span class="line">import org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line">import org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">    public class FeignConfig implements RequestInterceptor &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    @Primary</span><br><span class="line">    @Scope(&quot;prototype&quot;)</span><br><span class="line">    public Encoder multipartFormEncoder() &#123;</span><br><span class="line">        return new SpringFormEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public feign.Logger.Level multipartLoggerLevel() &#123;</span><br><span class="line">        return feign.Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void apply(RequestTemplate paramRequestTemplate) &#123;</span><br><span class="line">        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">        HttpServletRequest request = attributes.getRequest();</span><br><span class="line">        //添加token</span><br><span class="line">        paramRequestTemplate.query(&quot;access_token&quot;, request.getParameter(&quot;access_token&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>原因：当Feign开启Hystrix支持时，RequestContextHolder.getRequestAttributes()会为空，我们知道，Hystrix有隔离策略：THREAD以及SEMAPHORE。Hystrix的默认隔离策略是THREAD。当隔离策略为 THREAD 时，是没办法拿到 ThreadLocal 中的值的。</p></li><li><p>解决：我们可以将隔离策略设为SEMAPHORE，但该方案不是特别好。原因是Hystrix官方强烈建议使用THREAD作为隔离策略。那么只能自定义并发策略。编写一个类，让其继承HystrixConcurrencyStrategy。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">package com.fufu.config;</span><br><span class="line"></span><br><span class="line">import com.netflix.hystrix.HystrixThreadPoolKey;</span><br><span class="line">import com.netflix.hystrix.HystrixThreadPoolProperties;</span><br><span class="line">import com.netflix.hystrix.strategy.HystrixPlugins;</span><br><span class="line">import com.netflix.hystrix.strategy.concurrency.HystrixConcurrencyStrategy;</span><br><span class="line">import com.netflix.hystrix.strategy.concurrency.HystrixRequestVariable;</span><br><span class="line">import com.netflix.hystrix.strategy.concurrency.HystrixRequestVariableLifecycle;</span><br><span class="line">import com.netflix.hystrix.strategy.eventnotifier.HystrixEventNotifier;</span><br><span class="line">import com.netflix.hystrix.strategy.executionhook.HystrixCommandExecutionHook;</span><br><span class="line">import com.netflix.hystrix.strategy.metrics.HystrixMetricsPublisher;</span><br><span class="line">import com.netflix.hystrix.strategy.properties.HystrixPropertiesStrategy;</span><br><span class="line">import com.netflix.hystrix.strategy.properties.HystrixProperty;</span><br><span class="line">import org.apache.juli.logging.Log;</span><br><span class="line">import org.apache.juli.logging.LogFactory;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.springframework.web.context.request.RequestAttributes;</span><br><span class="line">import org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line">import java.util.concurrent.BlockingQueue;</span><br><span class="line">import java.util.concurrent.Callable;</span><br><span class="line">import java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public class RequestAttributeHystrixConcurrencyStrategy extends HystrixConcurrencyStrategy &#123;</span><br><span class="line">    private static final Log log = LogFactory.getLog(RequestAttributeHystrixConcurrencyStrategy.class);</span><br><span class="line"></span><br><span class="line">    private HystrixConcurrencyStrategy delegate;</span><br><span class="line"></span><br><span class="line">    public RequestAttributeHystrixConcurrencyStrategy() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            this.delegate = HystrixPlugins.getInstance().getConcurrencyStrategy();</span><br><span class="line">            if (this.delegate instanceof RequestAttributeHystrixConcurrencyStrategy) &#123;</span><br><span class="line">                // Welcome to singleton hell...</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            HystrixCommandExecutionHook commandExecutionHook = HystrixPlugins</span><br><span class="line">                    .getInstance().getCommandExecutionHook();</span><br><span class="line">            HystrixEventNotifier eventNotifier = HystrixPlugins.getInstance()</span><br><span class="line">                    .getEventNotifier();</span><br><span class="line">            HystrixMetricsPublisher metricsPublisher = HystrixPlugins.getInstance()</span><br><span class="line">                    .getMetricsPublisher();</span><br><span class="line">            HystrixPropertiesStrategy propertiesStrategy = HystrixPlugins.getInstance()</span><br><span class="line">                    .getPropertiesStrategy();</span><br><span class="line">            this.logCurrentStateOfHystrixPlugins(eventNotifier, metricsPublisher,</span><br><span class="line">                    propertiesStrategy);</span><br><span class="line">            HystrixPlugins.reset();</span><br><span class="line">            HystrixPlugins.getInstance().registerConcurrencyStrategy(this);</span><br><span class="line">            HystrixPlugins.getInstance()</span><br><span class="line">                    .registerCommandExecutionHook(commandExecutionHook);</span><br><span class="line">            HystrixPlugins.getInstance().registerEventNotifier(eventNotifier);</span><br><span class="line">            HystrixPlugins.getInstance().registerMetricsPublisher(metricsPublisher);</span><br><span class="line">            HystrixPlugins.getInstance().registerPropertiesStrategy(propertiesStrategy);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception e) &#123;</span><br><span class="line">            log.error(&quot;Failed to register Sleuth Hystrix Concurrency Strategy&quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void logCurrentStateOfHystrixPlugins(HystrixEventNotifier eventNotifier,</span><br><span class="line">                                                 HystrixMetricsPublisher metricsPublisher,</span><br><span class="line">                                                 HystrixPropertiesStrategy propertiesStrategy) &#123;</span><br><span class="line">        if (log.isDebugEnabled()) &#123;</span><br><span class="line">            log.debug(&quot;Current Hystrix plugins configuration is [&quot;</span><br><span class="line">                    + &quot;concurrencyStrategy [&quot; + this.delegate + &quot;],&quot; + &quot;eventNotifier [&quot;</span><br><span class="line">                    + eventNotifier + &quot;],&quot; + &quot;metricPublisher [&quot; + metricsPublisher + &quot;],&quot;</span><br><span class="line">                    + &quot;propertiesStrategy [&quot; + propertiesStrategy + &quot;],&quot; + &quot;]&quot;);</span><br><span class="line">            log.debug(&quot;Registering Sleuth Hystrix Concurrency Strategy.&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public &lt;T&gt; Callable&lt;T&gt; wrapCallable(Callable&lt;T&gt; callable) &#123;</span><br><span class="line">        RequestAttributes requestAttributes = RequestContextHolder.getRequestAttributes();</span><br><span class="line">        return new WrappedCallable&lt;&gt;(callable, requestAttributes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public ThreadPoolExecutor getThreadPool(HystrixThreadPoolKey threadPoolKey,</span><br><span class="line">                                            HystrixProperty&lt;Integer&gt; corePoolSize,</span><br><span class="line">                                            HystrixProperty&lt;Integer&gt; maximumPoolSize,</span><br><span class="line">                                            HystrixProperty&lt;Integer&gt; keepAliveTime, TimeUnit unit,</span><br><span class="line">                                            BlockingQueue&lt;Runnable&gt; workQueue) &#123;</span><br><span class="line">        return this.delegate.getThreadPool(threadPoolKey, corePoolSize, maximumPoolSize,</span><br><span class="line">                keepAliveTime, unit, workQueue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public ThreadPoolExecutor getThreadPool(HystrixThreadPoolKey threadPoolKey,</span><br><span class="line">                                            HystrixThreadPoolProperties threadPoolProperties) &#123;</span><br><span class="line">        return this.delegate.getThreadPool(threadPoolKey, threadPoolProperties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public BlockingQueue&lt;Runnable&gt; getBlockingQueue(int maxQueueSize) &#123;</span><br><span class="line">        return this.delegate.getBlockingQueue(maxQueueSize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public &lt;T&gt; HystrixRequestVariable&lt;T&gt; getRequestVariable(</span><br><span class="line">            HystrixRequestVariableLifecycle&lt;T&gt; rv) &#123;</span><br><span class="line">        return this.delegate.getRequestVariable(rv);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static class WrappedCallable&lt;T&gt; implements Callable&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">        private final Callable&lt;T&gt; target;</span><br><span class="line">        private final RequestAttributes requestAttributes;</span><br><span class="line"></span><br><span class="line">        public WrappedCallable(Callable&lt;T&gt; target, RequestAttributes requestAttributes) &#123;</span><br><span class="line">            this.target = target;</span><br><span class="line">            this.requestAttributes = requestAttributes;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public T call() throws Exception &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                RequestContextHolder.setRequestAttributes(requestAttributes);</span><br><span class="line">                return target.call();</span><br><span class="line">            &#125;</span><br><span class="line">            finally &#123;</span><br><span class="line">                RequestContextHolder.resetRequestAttributes();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>wrapCallable 方法拿到 RequestContextHolder.getRequestAttributes() ，也就是我们想传播的对象；</li><li>在 WrappedCallable 类中，我们将要传播的对象作为成员变量，并在其中的call方法中，为静态方法设值。</li><li>这样，在Hystrix包裹的方法中，就可以使用RequestContextHolder.getRequestAttributes() 获取到相关属性——也就是说，可以拿到RequestContextHolder 中的ThreadLocal 属性。</li><li>Hystrix只允许有一个并发策略！这意味着——如果不做任何处理，Sleuth、Spring Security将无法正常拿到上下文！（目前Sleuth、Spring Security都是通过自定义并发策略的方式来传递ThreadLocal对象的）。我们需要将现有的并发策略作为新并发策略的成员变量，在新并发策略中，返回现有并发策略的线程池、Queue。</li></ul></li><li>测试图片<br><img src="/images/feign-oauth.jpg" alt="&quot;图片描述&quot;"><br>通过cookie或者带上access_token参数都可以请求成功。</li></ul><blockquote><p><code>源码：https://github.com/qq1028951741/spring-cloud-demo.git or 右上角github进去，spring-cloud-demo项目，如果对您有帮助，麻烦点下star，谢谢</code></p></blockquote><hr><blockquote class="blockquote-center"><p>人生两苦：想要却不得，拥有却失去。  –褚禄山<br>            珍惜当下,与君共勉~</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;
    
    </summary>
    
      <category term="SpringCloud 整合系列" scheme="https://qq1028951741.github.io/categories/SpringCloud-%E6%95%B4%E5%90%88%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="SpringCloud" scheme="https://qq1028951741.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud：基于oauth2.0统一认证授权</title>
    <link href="https://qq1028951741.github.io/2019/02/16/SpringCloud%EF%BC%9A%E5%9F%BA%E4%BA%8EOAUTH2.0%E7%BB%9F%E4%B8%80%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83/"/>
    <id>https://qq1028951741.github.io/2019/02/16/SpringCloud：基于OAUTH2.0统一认证授权/</id>
    <published>2019-02-16T08:52:34.000Z</published>
    <updated>2019-02-19T08:01:17.789Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""></the></excerpt></p><h2 id="SpringCloud：基于OAUTH2-0统一认证授权"><a href="#SpringCloud：基于OAUTH2-0统一认证授权" class="headerlink" title="SpringCloud：基于OAUTH2.0统一认证授权"></a>SpringCloud：基于OAUTH2.0统一认证授权</h2><blockquote><p>OAUTH协议为用户资源的授权提供了一个安全的、开放而又简易的标准。与以往的授权方式不同之处是OAUTH的授权不会使第三方触及到用户的帐号信息（如用户名与密码），即第三方无需使用用户的用户名与密码就可以申请获得该用户资源的授权，因此OAUTH是安全的。oAuth是Open Authorization的简写。具体解释参考 <code>http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html</code> </p></blockquote><p>在原本的spring-cloud-demo新增oauth-server认证服务和把business-service配置成资源服务，这样我们需先通过zuul网管去oauth-server认证服务获取access_token，然后请求url带着access_token访问business-service的接口，这样就实现了business-service服务资源保护。采用的是password授权模式。</p><ul><li>存储token使用的是redis，所以需要本地启动一个redis服务</li><li>使用数据库保存客户端信息，所以需要在数据库执行oauth-server中resources李的sql脚本clients.sql</li><li>包含一个认证服务器，一个business-service改造的资源服务器</li></ul><h3 id="认证服务器"><a href="#认证服务器" class="headerlink" title="认证服务器"></a>认证服务器</h3><p><img src="/images/oauth1.jpg" alt="&quot;图片描述&quot;"></p><p>这里参考源码中的oauth-server配置，主要是TokenStore、UserDetailsService、WebSecurityConfigurerAdapter、AuthorizationServerConfigurerAdapter的token、user、web安全和鉴权配置。</p><h3 id="资源服务器"><a href="#资源服务器" class="headerlink" title="资源服务器"></a>资源服务器</h3><p>在business-service服务上进行修改</p><ul><li><p>新增config</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package com.fufu.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.autoconfigure.security.oauth2.client.EnableOAuth2Sso;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;</span><br><span class="line">import org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line">import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"></span><br><span class="line">@EnableOAuth2Sso</span><br><span class="line">@Configuration</span><br><span class="line">@EnableGlobalMethodSecurity(securedEnabled = true)</span><br><span class="line">public class SecurityConfig extends WebSecurityConfigurerAdapter&#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(&quot;/index&quot;)</span><br><span class="line">                .permitAll()</span><br><span class="line">                .anyRequest()</span><br><span class="line">                .authenticated();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>controller新增接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;/user&quot;)</span><br><span class="line">    @Secured(&quot;ROLE_USER&quot;)</span><br><span class="line">    public Authentication getUser() &#123;</span><br><span class="line">        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">        return authentication;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>@Secured(“ROLE_USER”)控制访问权限</p></li><li><p>Application增加注解@EnableResourceServer</p></li><li>bootstrap.yml新增配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">auth-server: http://localhost:2006 # 认证服务器地址</span><br><span class="line"></span><br><span class="line">security:</span><br><span class="line">  oauth2:</span><br><span class="line">    client:</span><br><span class="line">      client-id: admin # 授权服务器配置的client id</span><br><span class="line">      client-secret: admin # 授权服务器配置的client secret</span><br><span class="line">      scope: all</span><br><span class="line">      #access-token-uri: $&#123;auth-server&#125;/oauth/token # 获取access token接口</span><br><span class="line">      #user-authorization-uri: $&#123;auth-server&#125;/oauth/authorize #  获取Authorization Code接口</span><br><span class="line">    resource:</span><br><span class="line">      token-info-uri: $&#123;auth-server&#125;/oauth/check_token # 验证token的接口</span><br><span class="line">#      user-info-uri: $&#123;auth-server&#125;/user # 一个可以获取认证授权的自定义接口，可以在授权服务器，也可以在其他服务器上</span><br><span class="line">#      prefer-token-info: true # 如果同时配置了token-info-uri 和 user-info-uri，这个现象设置使用哪个取验证授权</span><br></pre></td></tr></table></figure></li></ul><h3 id="zuul网管新增sso配置"><a href="#zuul网管新增sso配置" class="headerlink" title="zuul网管新增sso配置"></a>zuul网管新增sso配置</h3><ul><li>Application新增注解@EnableOAuth2Sso</li><li><p>新增config</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package com.fufu.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.autoconfigure.security.oauth2.client.EnableOAuth2Sso;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line">import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@EnableOAuth2Sso</span><br><span class="line">public class SecurityConfig extends WebSecurityConfigurerAdapter</span><br><span class="line">&#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        http.csrf().disable();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>bootstrap.yml新增配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">zuul:</span><br><span class="line">  routes:</span><br><span class="line">    business-service:</span><br><span class="line">      path: /springclouddemo/business/**</span><br><span class="line">      serviceId: business-service</span><br><span class="line">    file-service:</span><br><span class="line">      path: /springclouddemo/file/**</span><br><span class="line">      serviceId: file-service</span><br><span class="line">    oauth-server:</span><br><span class="line">      path: /springclouddemo/auth/**</span><br><span class="line">      serviceId: oauth-server</span><br><span class="line">  sensitive-headers:</span><br><span class="line"></span><br><span class="line">auth-server: http://localhost:2001/springclouddemo/auth # 认证服务器地址</span><br><span class="line"></span><br><span class="line">security:</span><br><span class="line">  oauth2:</span><br><span class="line">    client:</span><br><span class="line">      client-id: admin # 授权服务器配置的client id</span><br><span class="line">      client-secret: admin # 授权服务器配置的client secret</span><br><span class="line">      scope: all</span><br><span class="line">      #access-token-uri: $&#123;auth-server&#125;/oauth/token # 获取access token接口</span><br><span class="line">      #user-authorization-uri: $&#123;auth-server&#125;/oauth/authorize #  获取Authorization Code接口</span><br><span class="line">    resource:</span><br><span class="line">      token-info-uri: $&#123;auth-server&#125;/oauth/check_token # 验证token的接口</span><br><span class="line">#      user-info-uri: $&#123;auth-server&#125;/user # 一个可以获取认证授权的自定义接口，可以在授权服务器，也可以在其他服务器上</span><br><span class="line">#      prefer-token-info: true # 如果同时配置了token-info-uri 和 user-info-uri，这个现象设置使用哪个取验证授权</span><br></pre></td></tr></table></figure></li></ul><p>新增转发<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">oauth-server:</span><br><span class="line">      path: /springclouddemo/auth/**</span><br><span class="line">      serviceId: oauth-server</span><br></pre></td></tr></table></figure></p><p>sensitive-headers配置是为了让zuul转发时不拦截Authorization请求头</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ul><li>依次启动服务eureka-server、zuul-service、oauth-server、business-service</li><li>通过post请求oauth-server认证服务的oauth/token进行认证，其中username、password是我们执行sql加的用户名和密码，Authorization为Basic type的且用户密码在ServerConfig类进行配置客户端id和密码，grant_type即oauth授权模式，采用的是password授权模式。<br><img src="/images/oauth2.png" alt="&quot;图片描述&quot;"></li><li>带着access_token请求business-service服务 <ul><li>access_token正确<br><img src="/images/oauth3.jpg" alt="&quot;图片描述&quot;"></li><li>access_token错误<br><img src="/images/oauth4.jpg" alt="&quot;图片描述&quot;"></li></ul></li></ul><blockquote><p><code>源码：https://github.com/qq1028951741/spring-cloud-demo.git or 右上角github进去，spring-cloud-demo项目，如果对您有帮助，麻烦点下star，谢谢</code></p></blockquote><hr><blockquote class="blockquote-center"><p>人生两苦：想要却不得，拥有却失去。  –褚禄山<br>            珍惜当下,与君共勉~</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;
    
    </summary>
    
      <category term="SpringCloud 整合系列" scheme="https://qq1028951741.github.io/categories/SpringCloud-%E6%95%B4%E5%90%88%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="SpringCloud" scheme="https://qq1028951741.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud：服务追踪组件zipkin</title>
    <link href="https://qq1028951741.github.io/2019/01/13/SpringCloud%EF%BC%9A%E6%9C%8D%E5%8A%A1%E8%BF%BD%E8%B8%AA%E7%BB%84%E4%BB%B6zipkin/"/>
    <id>https://qq1028951741.github.io/2019/01/13/SpringCloud：服务追踪组件zipkin/</id>
    <published>2019-01-13T13:23:46.000Z</published>
    <updated>2019-02-19T07:41:41.975Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""></the></excerpt></p><h2 id="SpringCloud：服务追踪组件zipkin"><a href="#SpringCloud：服务追踪组件zipkin" class="headerlink" title="SpringCloud：服务追踪组件zipkin"></a>SpringCloud：服务追踪组件zipkin</h2><blockquote><p>Spring Cloud Sleuth在分布式系统中提供追踪解决方案，并且兼容支持了 zipkin，我们只要在pom文件中引入相应的依赖即可。 </p></blockquote><h3 id="Spring-Cloud-Sleuth原理图"><a href="#Spring-Cloud-Sleuth原理图" class="headerlink" title="Spring Cloud Sleuth原理图"></a>Spring Cloud Sleuth原理图</h3><p><img src="/images/服务追踪1.jpg" alt="&quot;图片描述&quot;"></p><h3 id="Zipkin组件"><a href="#Zipkin组件" class="headerlink" title="Zipkin组件"></a>Zipkin组件</h3><ul><li>Zipkin 是一个开放源代码分布式的跟踪系统，由Twitter公司开源，它致力于收集服务的定时数据，以解决微服务架构中的延迟问题，包括数据的收集、存储、查找和展现。</li><li>每个服务向zipkin报告计时数据，zipkin会根据调用关系通过Zipkin UI生成依赖关系图，显示了多少跟踪请求通过每个服务，该系统让开发者可通过一个 Web 前端轻松的收集和分析数据，例如用户每次请求服务的处理时间等，可方便的监测系统中存在的瓶颈。</li><li>Zipkin提供了可插拔数据存储方式：In-Memory、MySql、Cassandra以及Elasticsearch。接下来的测试为方便直接采用In-Memory方式进行存储，生产推荐Elasticsearch。</li></ul><h3 id="新建zipkin-service模块"><a href="#新建zipkin-service模块" class="headerlink" title="新建zipkin-service模块"></a>新建zipkin-service模块</h3><ul><li><p>pom依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;com.fufu&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-demo&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.fufu&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;zipkin-service&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;zipkin-service&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.zipkin.java&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;zipkin-server&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.9.4&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.zipkin.java&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;zipkin-autoconfigure-ui&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.9.4&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure></li><li><p>application启动类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.fufu;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import zipkin.server.internal.EnableZipkinServer;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableZipkinServer</span><br><span class="line">public class ZipkinServiceApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(ZipkinServiceApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>yml配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: zipkin-service</span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: 2005</span><br><span class="line">  </span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://localhost:2000/eureka/</span><br><span class="line">  instance:</span><br><span class="line">    status-page-url: http://localhost:$&#123;server.port&#125;/swagger-ui.html  # $&#123;server.port&#125;为该服务的端口号</span><br></pre></td></tr></table></figure></li></ul><h3 id="目前spring-cloud-demo所有模块"><a href="#目前spring-cloud-demo所有模块" class="headerlink" title="目前spring-cloud-demo所有模块"></a>目前spring-cloud-demo所有模块</h3><p><img src="/images/服务追踪2.jpg" alt="&quot;图片描述&quot;"></p><h3 id="对需要追踪的模块加上配置"><a href="#对需要追踪的模块加上配置" class="headerlink" title="对需要追踪的模块加上配置"></a>对需要追踪的模块加上配置</h3><p> 我这边给business-service、file-service、zuul-service三个模块加上追踪配置，每个服务会向zipkin报告计时数据。</p><ul><li><p>spring-cloud-demo的pom.xml加上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-zipkin&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>yml配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  zipkin:</span><br><span class="line">    base-url: http://localhost:2005</span><br><span class="line">  sleuth:</span><br><span class="line">    sampler:</span><br><span class="line">      percentage: 1.0</span><br></pre></td></tr></table></figure><p>​    spring.zipkin.base-url指定了Zipkin服务器的地址，spring.sleuth.sampler.percentage将采样比例设置为1.0，也就是全部都需要。(percentage如果不设置为1的话，只能采集单个服务调用数据)</p><p>​    Spring Cloud Sleuth有一个Sampler策略，可以通过这个实现类来控制采样算法。采样器不会阻碍span相关id的产生，但是会对导出以及附加事件标签的相关操作造成影响。 Sleuth默认采样算法的实现是Reservoir sampling，具体的实现类是PercentageBasedSampler，默认的采样比例为: 0.1(即10%)。不过我们可以通过spring.sleuth.sampler.percentage来设置，所设置的值介于0.0到1.0之间，1.0则表示全部采集。</p></li></ul><h3 id="服务追踪"><a href="#服务追踪" class="headerlink" title="服务追踪"></a>服务追踪</h3><ul><li><p>访问<a href="http://localhost:2005/zipkin/" target="_blank" rel="noopener">http://localhost:2005/zipkin/</a></p></li><li><p>进行服务间调用</p></li><li><p>点击Find Traces查询服务追踪</p><p><img src="/images/服务追踪3.jpg" alt="&quot;图片描述&quot;"></p></li><li><p>点击Dependencies查看服务间依赖</p><p><img src="/images/服务追踪4.jpg" alt="&quot;图片描述&quot;"></p></li></ul><blockquote><p><code>源码：https://github.com/qq1028951741/spring-cloud-demo.git or 右上角github进去，spring-cloud-demo项目，如果对您有帮助，麻烦点下star，谢谢</code></p></blockquote><hr><blockquote class="blockquote-center"><p>人生两苦：想要却不得，拥有却失去。  –褚禄山<br>            珍惜当下,与君共勉~</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;
    
    </summary>
    
      <category term="SpringCloud 整合系列" scheme="https://qq1028951741.github.io/categories/SpringCloud-%E6%95%B4%E5%90%88%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="SpringCloud" scheme="https://qq1028951741.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud：config-service配置中心</title>
    <link href="https://qq1028951741.github.io/2019/01/08/SpringCloud%EF%BC%9Aconfig-service%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/"/>
    <id>https://qq1028951741.github.io/2019/01/08/SpringCloud：config-service配置中心/</id>
    <published>2019-01-08T12:41:43.000Z</published>
    <updated>2019-02-19T07:27:42.570Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""></the></excerpt></p><h2 id="SpringCloud：config-service配置中心"><a href="#SpringCloud：config-service配置中心" class="headerlink" title="SpringCloud：config-service配置中心"></a>SpringCloud：config-service配置中心</h2><h3 id="新增config-service模块"><a href="#新增config-service模块" class="headerlink" title="新增config-service模块"></a>新增config-service模块</h3><p><img src="/images/配置中心1.jpg" alt="&quot;图片描述&quot;"></p><ul><li><p>pom.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;com.fufu&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-demo&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.fufu&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;config-service&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;config-service&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure></li><li><p>application启动类增加@EnableConfigServer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.fufu;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line">import org.springframework.cloud.config.server.EnableConfigServer;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableConfigServer</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">public class ConfigServiceApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(ConfigServiceApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置github仓库地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: config-service</span><br><span class="line">  cloud:</span><br><span class="line">    config:</span><br><span class="line">      server:</span><br><span class="line">        git:</span><br><span class="line">          #git 仓库的地址</span><br><span class="line">          uri: https://github.com/**/**.git</span><br><span class="line">server:</span><br><span class="line">  port: 2004</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://localhost:2000/eureka/</span><br><span class="line">  instance:</span><br><span class="line">    status-page-url: http://localhost:$&#123;server.port&#125;/swagger-ui.html  # $&#123;server.port&#125;为该服务的端口号</span><br></pre></td></tr></table></figure><p>该仓库应该放有对应配置文件，配置文件命名和http请求映射如下 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/&#123;application&#125;/&#123;profile&#125;[/&#123;label&#125;]</span><br><span class="line">/&#123;application&#125;-&#123;profile&#125;.yml</span><br><span class="line">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.yml</span><br><span class="line">/&#123;application&#125;-&#123;profile&#125;.properties</span><br><span class="line">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.properties</span><br></pre></td></tr></table></figure><p>比如我的仓库里放了<strong>business-service-dev.yml</strong> 文件，那么 business-service 模块里的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring:  </span><br><span class="line">  cloud:</span><br><span class="line">    config:</span><br><span class="line">      profile: dev</span><br><span class="line">      label: master</span><br><span class="line">      uri: http://localhost:2004/</span><br></pre></td></tr></table></figure><p>的意思是会到<a href="http://localhost:2004/的config-service配置中心的github中取business-service模块的profile" target="_blank" rel="noopener">http://localhost:2004/的config-service配置中心的github中取business-service模块的profile</a>: dev文件，即<strong>business-service-dev.yml</strong> 文件</p><ul><li><p>仓库中<strong>business-service-dev.yml</strong> 文件内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test: 110</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="business-service模块配置"><a href="#business-service模块配置" class="headerlink" title="business-service模块配置"></a>business-service模块配置</h3><ul><li><p>新增依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>Controller新增</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Value(&quot;$&#123;test&#125;&quot;)</span><br><span class="line">    private String test;</span><br><span class="line">@GetMapping(&quot;/test&quot;)</span><br><span class="line">public String test()&#123;</span><br><span class="line">return test;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: business-service</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql://127.0.0.1:3306/mytest1?useUnicode=true&amp;characterEncoding=UTF-8</span><br><span class="line">    username: root</span><br><span class="line">    password: orcl</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">  cloud:</span><br><span class="line">    config:</span><br><span class="line">      profile: dev</span><br><span class="line">      label: master</span><br><span class="line">      uri: http://localhost:2004/ #指向config-service</span><br><span class="line">#      discovery:</span><br><span class="line">#        enabled: true</span><br><span class="line">#        service-id: config-service</span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: 2002</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://localhost:2000/eureka/</span><br><span class="line">  instance:</span><br><span class="line">    status-page-url: http://localhost:$&#123;server.port&#125;/swagger-ui.html  # $&#123;server.port&#125;为该服务的端口号</span><br><span class="line">feign:</span><br><span class="line">  hystrix:</span><br><span class="line">    enabled: true</span><br><span class="line"></span><br><span class="line">#是否需要权限拉去，默认是true,如果不false就不允许你去拉取配置中心Server更新的内容</span><br><span class="line">management:</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: refresh</span><br></pre></td></tr></table></figure><p>新增</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cloud:</span><br><span class="line">    config:</span><br><span class="line">      profile: dev #dev开发环境配置文件 test测试环境 pro正式环境</span><br><span class="line">      label: master #指明远程仓库的分支</span><br><span class="line">      uri: http://localhost:2004/ #指向config-service      </span><br><span class="line">#是否需要权限拉去，默认是true,如果不false就不允许你去拉取配置中心Server更新的内容</span><br><span class="line">management:</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: refresh</span><br></pre></td></tr></table></figure></li></ul><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ul><li><p>第一次请求 <a href="http://127.0.0.1:2002/business/test" target="_blank" rel="noopener">http://127.0.0.1:2002/business/test</a></p><p><img src="/images/配置中心2.jpg" alt="&quot;图片描述&quot;"></p></li><li><p>修改github仓库文件<strong>business-service-dev.yml</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test: 120</span><br></pre></td></tr></table></figure></li><li><p>触发actuator刷新配置</p><p><img src="/images/配置中心3.jpg" alt="&quot;图片描述&quot;"></p></li><li><p>重新请求参数，可以看到配置参数已经刷新</p><p><img src="/images/配置中心4.jpg" alt="&quot;图片描述&quot;"></p></li></ul><blockquote><p><code>源码：https://github.com/qq1028951741/spring-cloud-demo.git or 右上角github进去，spring-cloud-demo项目，如果对您有帮助，麻烦点下star，谢谢</code></p></blockquote><hr><blockquote class="blockquote-center"><p>人生两苦：想要却不得，拥有却失去。  –褚禄山<br>            珍惜当下,与君共勉~</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;
    
    </summary>
    
      <category term="SpringCloud 整合系列" scheme="https://qq1028951741.github.io/categories/SpringCloud-%E6%95%B4%E5%90%88%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="SpringCloud" scheme="https://qq1028951741.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud：Zuul网关</title>
    <link href="https://qq1028951741.github.io/2019/01/04/SpringCloud%EF%BC%9AZuul%E7%BD%91%E5%85%B3/"/>
    <id>https://qq1028951741.github.io/2019/01/04/SpringCloud：Zuul网关/</id>
    <published>2019-01-04T08:52:34.000Z</published>
    <updated>2019-02-19T07:27:20.397Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""></the></excerpt></p><h2 id="SpringCloud：Zuul网关"><a href="#SpringCloud：Zuul网关" class="headerlink" title="SpringCloud：Zuul网关"></a>SpringCloud：Zuul网关</h2><blockquote><p>Zuul的主要功能是路由转发和过滤器。路由功能是微服务的一部分 </p></blockquote><h3 id="新建zuul-service服务模块"><a href="#新建zuul-service服务模块" class="headerlink" title="新建zuul-service服务模块"></a>新建zuul-service服务模块</h3><ul><li><p>pom.xml </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;com.fufu&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-demo&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.fufu&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;zuul-service&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;zuul-service&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-zuul&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure></li><li><p>application启动类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package com.fufu;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line">import org.springframework.cloud.netflix.zuul.EnableZuulProxy;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableZuulProxy</span><br><span class="line">@EnableEurekaClient</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">public class ZuulServiceApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(ZuulServiceApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>bootstrap.yml配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: zuul-service</span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: 2001</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://localhost:2000/eureka/</span><br><span class="line">  instance:</span><br><span class="line">    status-page-url: http://localhost:$&#123;server.port&#125;/swagger-ui.html  # $&#123;server.port&#125;为该服务的端口号</span><br><span class="line"></span><br><span class="line">zuul:</span><br><span class="line">  routes:</span><br><span class="line">    business-service:</span><br><span class="line">      path: /springclouddemo/business/**</span><br><span class="line">      serviceId: business-service</span><br><span class="line">    file-service:</span><br><span class="line">      path: /springclouddemo/file/**</span><br><span class="line">      serviceId: file-service</span><br></pre></td></tr></table></figure></li><li><p>访问  <a href="http://localhost:2001/springclouddemo/business/*" target="_blank" rel="noopener">http://localhost:2001/springclouddemo/business/*</a>*</p></li></ul><h3 id="服务过滤"><a href="#服务过滤" class="headerlink" title="服务过滤"></a>服务过滤</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">package com.fufu.filter;</span><br><span class="line"></span><br><span class="line">import com.netflix.zuul.ZuulFilter;</span><br><span class="line">import com.netflix.zuul.context.RequestContext;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public class PreFilter extends ZuulFilter &#123;</span><br><span class="line"></span><br><span class="line">    private static Logger log = LoggerFactory.getLogger(PreFilter.class);</span><br><span class="line">    @Override</span><br><span class="line">    public String filterType() &#123;</span><br><span class="line">        return &quot;pre&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int filterOrder() &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean shouldFilter() &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Object run() &#123;</span><br><span class="line">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = ctx.getRequest();</span><br><span class="line">        log.info(String.format(&quot;%s &gt;&gt;&gt; %s&quot;, request.getMethod(), request.getRequestURL().toString()));</span><br><span class="line">        Object accessToken = request.getParameter(&quot;token&quot;);</span><br><span class="line">        if(accessToken == null) &#123;</span><br><span class="line">            log.warn(&quot;token is empty&quot;);</span><br><span class="line">            ctx.setSendZuulResponse(false);</span><br><span class="line">            ctx.setResponseStatusCode(401);</span><br><span class="line">            try &#123;</span><br><span class="line">                ctx.getResponse().getWriter().write(&quot;token is empty&quot;);</span><br><span class="line">            &#125;catch (Exception e)&#123;&#125;</span><br><span class="line"></span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(&quot;ok&quot;);</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>filterType：返回一个字符串代表过滤器的类型，在zuul中定义了四种不同生命周期的过滤器类型，具体如下：<ul><li>pre：路由之前</li><li>routing：路由之时</li><li>post： 路由之后</li><li>error：发送错误调用</li></ul></li><li>filterOrder：过滤的顺序</li><li>shouldFilter：这里可以写逻辑判断，是否要过滤，本文true,永远过滤。</li><li>run：过滤器的具体逻辑。可用很复杂，包括查sql，nosql去判断该请求到底有没有权限访问。</li></ul><blockquote><p><code>源码：https://github.com/qq1028951741/spring-cloud-demo.git or 右上角github进去，spring-cloud-demo项目，如果对您有帮助，麻烦点下star，谢谢</code></p></blockquote><hr><blockquote class="blockquote-center"><p>人生两苦：想要却不得，拥有却失去。  –褚禄山<br>            珍惜当下,与君共勉~</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;
    
    </summary>
    
      <category term="SpringCloud 整合系列" scheme="https://qq1028951741.github.io/categories/SpringCloud-%E6%95%B4%E5%90%88%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="SpringCloud" scheme="https://qq1028951741.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud：Feign增加Hystrix断路器</title>
    <link href="https://qq1028951741.github.io/2018/12/31/SpringCloud%EF%BC%9AFeign%E5%A2%9E%E5%8A%A0Hystrix%E6%96%AD%E8%B7%AF%E5%99%A8/"/>
    <id>https://qq1028951741.github.io/2018/12/31/SpringCloud：Feign增加Hystrix断路器/</id>
    <published>2018-12-31T03:16:54.000Z</published>
    <updated>2019-01-29T11:37:46.733Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""></the></excerpt></p><h2 id="SpringCloud：Feign增加Hystrix断路器"><a href="#SpringCloud：Feign增加Hystrix断路器" class="headerlink" title="SpringCloud：Feign增加Hystrix断路器"></a>SpringCloud：Feign增加Hystrix断路器</h2><blockquote><p>由于网络原因或者自身的原因，服务并不能保证100%可用，如果单个服务出现问题，调用这个服务就会出现线程阻塞，此时若有大量的请求涌入，Servlet容器的线程资源会被消耗完毕，导致服务瘫痪。服务与服务之间的依赖性，故障会传播，会对整个微服务系统造成灾难性的严重后果，这就是服务故障的“雪崩”效应。为了解决这个问题，业界提出了断路器模型。断路打开后，可用避免连锁故障，fallback方法可以直接返回一个固定值。 </p></blockquote><h3 id="目前SpringCloudDemo结构"><a href="#目前SpringCloudDemo结构" class="headerlink" title="目前SpringCloudDemo结构"></a>目前SpringCloudDemo结构</h3><p><img src="/images/springcloud断路器1.jpg" alt="&quot;图片描述&quot;"></p><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><ul><li><p>在spring-cloud-demo的pom.xml里添加依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>在business-service的bootstrap.yml开启断路器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">feign:</span><br><span class="line">  hystrix:</span><br><span class="line">    enabled: true</span><br></pre></td></tr></table></figure></li><li><p>上一章节，我们把feign调用放在common-module了，这样其他模块也能用到这个feign，所以要在公共模块进行修改</p></li></ul><p>  <img src="/images/springcloud断路器2.jpg" alt="&quot;图片描述&quot;"></p><p>  在FileService类的@FeignClient增加 fallback = FileHystric.class</p><p>  <code>@FeignClient(value = &quot;file-service&quot;,fallback = FileHystric.class)</code></p><p>  新增FileHystric类实现FileService接口</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package com.fufu.feignHystric;</span><br><span class="line"></span><br><span class="line">import com.fufu.feignClient.FileService;</span><br><span class="line">import com.fufu.util.Result;</span><br><span class="line">import feign.Response;</span><br><span class="line">import org.springframework.http.HttpStatus;</span><br><span class="line">import org.springframework.http.ResponseEntity;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public class FileHystric implements FileService &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Result uploadFile(MultipartFile file, String folderName, String fileName) &#123;</span><br><span class="line">        return Result.error(&quot;文件上传服务调用失败！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public ResponseEntity&lt;byte[]&gt; downloadFile(String relativePath)&#123;</span><br><span class="line">        return new ResponseEntity&lt;byte[]&gt;(null, null, HttpStatus.NOT_FOUND);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Response httpGetFile(String relativePath)&#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="增加hystrix仪表盘监控"><a href="#增加hystrix仪表盘监控" class="headerlink" title="增加hystrix仪表盘监控"></a>增加hystrix仪表盘监控</h3><ul><li><p>单个实例hystrix监控</p><ul><li><p>添加依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-netflix-hystrix-dashboard&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>application启动类增加注解和servlet注册bean(不然会被拦截)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@EnableHystrixDashboard</span><br><span class="line">@EnableCircuitBreaker</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">    public ServletRegistrationBean hystrixMetricsStreamServlet() &#123;</span><br><span class="line">        ServletRegistrationBean registration = new ServletRegistrationBean(new HystrixMetricsStreamServlet());</span><br><span class="line">        registration.addUrlMappings(&quot;/hystrix.stream&quot;);</span><br><span class="line">        return registration;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>访问<a href="http://localhost:port/hystrix" target="_blank" rel="noopener">http://localhost:port/hystrix</a> </p><p><img src="/images/springcloud断路器3.jpg" alt="&quot;图片描述&quot;"></p></li><li><p>第一个长条输入你想访问的stream流 <a href="http://localhost:port/hystrix.stream" target="_blank" rel="noopener">http://localhost:port/hystrix.stream</a> ，点击monitor，出现监控视图</p><p><img src="/images/springcloud断路器4.png" alt="&quot;图片描述&quot;"></p></li></ul></li><li><p>集群hystrix监控</p><ul><li><p>Netflix提供了一个开源项目（Turbine）来提供把多个hystrix.stream的内容聚合为一个数据源供Dashboard展示。 </p></li><li><p>依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-starter-turbine&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-netflix-turbine&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-starter-hystrix-dashboard&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure></li><li><p>配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=hystrix-dashboard-turbine</span><br><span class="line">server.port=8001</span><br><span class="line">turbine.appConfig=node01,node02</span><br><span class="line">turbine.aggregator.clusterConfig= default</span><br><span class="line">turbine.clusterNameExpression= new String(&quot;default&quot;)</span><br><span class="line"></span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://localhost:8000/eureka/</span><br></pre></td></tr></table></figure><ul><li>turbine.appConfig：配置Eureka中的serviceId列表，表明监控哪些服务</li><li>turbine.aggregator.clusterConfig：指定聚合哪些集群，多个使用”,”分割，默认为default。可使用<code>http://.../turbine.stream?cluster={clusterConfig之一}</code>访问</li><li>turbine.clusterNameExpression：<ul><li>clusterNameExpression指定集群名称，默认表达式appName；此时：<code>turbine.aggregator.clusterConfig</code>需要配置想要监控的应用名称；</li><li>当clusterNameExpression: default时，<code>turbine.aggregator.clusterConfig</code>可以不写，因为默认就是default；</li><li>当clusterNameExpression: metadata[‘cluster’]时，假设想要监控的应用配置了<code>eureka.instance.metadata-map.cluster: ABC</code>，则需要配置，同时<code>turbine.aggregator.clusterConfig: ABC</code></li></ul></li></ul></li><li><p>application启动类增加注解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@EnableHystrixDashboard</span><br><span class="line">@EnableTurbine</span><br></pre></td></tr></table></figure></li><li><p>访问<a href="http://localhost:port/turbine.stream" target="_blank" rel="noopener">http://localhost:port/turbine.stream</a> 出现两个监控列表</p></li></ul></li></ul><blockquote><p><code>源码：https://github.com/qq1028951741/spring-cloud-demo.git or 右上角github进去，spring-cloud-demo项目，如果对您有帮助，麻烦点下star，谢谢</code></p></blockquote><hr><blockquote class="blockquote-center"><p>人生两苦：想要却不得，拥有却失去。  –褚禄山<br>            珍惜当下,与君共勉~</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;
    
    </summary>
    
      <category term="SpringCloud 整合系列" scheme="https://qq1028951741.github.io/categories/SpringCloud-%E6%95%B4%E5%90%88%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="SpringCloud" scheme="https://qq1028951741.github.io/tags/SpringCloud/"/>
    
  </entry>
  
</feed>
